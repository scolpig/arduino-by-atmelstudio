
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7f  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ab  00000000  00000000  00000fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000643  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d7  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00002a41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  9e:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <dotmatrix_test>:
void dotmatrix_update(char* pattern){
	for(int i=0;i<8;i++){
		dotmatrix_row[i] = pattern[i];
	}
	return;
}
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	1c c0       	rjmp	.+56     	; 0xe8 <dotmatrix_test+0x42>
  b0:	45 b9       	out	0x05, r20	; 5
  b2:	9b 01       	movw	r18, r22
  b4:	08 2e       	mov	r0, r24
  b6:	02 c0       	rjmp	.+4      	; 0xbc <dotmatrix_test+0x16>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <dotmatrix_test+0x12>
  c0:	20 95       	com	r18
  c2:	2b b9       	out	0x0b, r18	; 11
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	31 ee       	ldi	r19, 0xE1	; 225
  c8:	54 e0       	ldi	r21, 0x04	; 4
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	50 40       	sbci	r21, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <dotmatrix_test+0x24>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <dotmatrix_test+0x2e>
  d4:	00 00       	nop
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	91 05       	cpc	r25, r1
  dc:	49 f7       	brne	.-46     	; 0xb0 <dotmatrix_test+0xa>
  de:	15 b8       	out	0x05, r1	; 5
  e0:	31 96       	adiw	r30, 0x01	; 1
  e2:	e4 30       	cpi	r30, 0x04	; 4
  e4:	f1 05       	cpc	r31, r1
  e6:	31 f1       	breq	.+76     	; 0x134 <dotmatrix_test+0x8e>
  e8:	46 2f       	mov	r20, r22
  ea:	0e 2e       	mov	r0, r30
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <dotmatrix_test+0x4a>
  ee:	44 0f       	add	r20, r20
  f0:	0a 94       	dec	r0
  f2:	ea f7       	brpl	.-6      	; 0xee <dotmatrix_test+0x48>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	db cf       	rjmp	.-74     	; 0xb0 <dotmatrix_test+0xa>
  fa:	48 b9       	out	0x08, r20	; 8
  fc:	9b 01       	movw	r18, r22
  fe:	08 2e       	mov	r0, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <dotmatrix_test+0x60>
 102:	22 0f       	add	r18, r18
 104:	33 1f       	adc	r19, r19
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <dotmatrix_test+0x5c>
 10a:	20 95       	com	r18
 10c:	2b b9       	out	0x0b, r18	; 11
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	31 ee       	ldi	r19, 0xE1	; 225
 112:	54 e0       	ldi	r21, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	50 40       	sbci	r21, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <dotmatrix_test+0x6e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <dotmatrix_test+0x78>
 11e:	00 00       	nop
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	91 05       	cpc	r25, r1
 126:	49 f7       	brne	.-46     	; 0xfa <dotmatrix_test+0x54>
 128:	18 b8       	out	0x08, r1	; 8
 12a:	31 96       	adiw	r30, 0x01	; 1
 12c:	e4 30       	cpi	r30, 0x04	; 4
 12e:	f1 05       	cpc	r31, r1
 130:	29 f4       	brne	.+10     	; 0x13c <dotmatrix_test+0x96>
 132:	08 95       	ret
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	46 2f       	mov	r20, r22
 13e:	0e 2e       	mov	r0, r30
 140:	01 c0       	rjmp	.+2      	; 0x144 <dotmatrix_test+0x9e>
 142:	44 0f       	add	r20, r20
 144:	0a 94       	dec	r0
 146:	ea f7       	brpl	.-6      	; 0x142 <dotmatrix_test+0x9c>
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	d6 cf       	rjmp	.-84     	; 0xfa <dotmatrix_test+0x54>

0000014e <dotmatrix_init>:
void dotmatrix_init(void){
	dot_matrix_comm_low_DDR |= 0b00001111;
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	8f 60       	ori	r24, 0x0F	; 15
 152:	84 b9       	out	0x04, r24	; 4
	dot_matrix_comm_low_PORT = 0;
 154:	15 b8       	out	0x05, r1	; 5
	dot_matrix_comm_high_DDR |= 0b00001111;
 156:	87 b1       	in	r24, 0x07	; 7
 158:	8f 60       	ori	r24, 0x0F	; 15
 15a:	87 b9       	out	0x07, r24	; 7
	dot_matrix_comm_high_PORT = 0;
 15c:	18 b8       	out	0x08, r1	; 8
	dot_matrix_data_DDR = 0b11111111;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a b9       	out	0x0a, r24	; 10
	dot_matrix_data_PORT = 0b11111111;
 162:	8b b9       	out	0x0b, r24	; 11
 164:	ea e0       	ldi	r30, 0x0A	; 10
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	22 e1       	ldi	r18, 0x12	; 18
 16a:	31 e0       	ldi	r19, 0x01	; 1
	for(int i=0;i<8;i++){
		dotmatrix_row[i] = 255;    //0b11111111,   0xff
 16c:	81 93       	st	Z+, r24
	dot_matrix_comm_low_PORT = 0;
	dot_matrix_comm_high_DDR |= 0b00001111;
	dot_matrix_comm_high_PORT = 0;
	dot_matrix_data_DDR = 0b11111111;
	dot_matrix_data_PORT = 0b11111111;
	for(int i=0;i<8;i++){
 16e:	e2 17       	cp	r30, r18
 170:	f3 07       	cpc	r31, r19
 172:	e1 f7       	brne	.-8      	; 0x16c <dotmatrix_init+0x1e>
		dotmatrix_row[i] = 255;    //0b11111111,   0xff
	}
	return;
}
 174:	08 95       	ret

00000176 <Dot_matrix_main>:
		name[1][j] = KYOUNG[j];
	}
	for(int j=0;j<8;j++){
		name[2][j] = YOON[j];
	}*/
	dotmatrix_init(); 
 176:	0e 94 a7 00 	call	0x14e	; 0x14e <dotmatrix_init>
	
	while(1){
		dotmatrix_test();
 17a:	0e 94 53 00 	call	0xa6	; 0xa6 <dotmatrix_test>
 17e:	fd cf       	rjmp	.-6      	; 0x17a <Dot_matrix_main+0x4>

00000180 <FND_test>:
void FND_init(void){
	FND_DDR = 0b11111111;
	FND_PORT = 0b11111111;
	return;
}
void FND_test(void){
 180:	e0 e0       	ldi	r30, 0x00	; 0
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	2a e0       	ldi	r18, 0x0A	; 10
 186:	31 e0       	ldi	r19, 0x01	; 1
	
	for(int i=0;i<10;i++){
		FND_PORT = FND_font[i];
 188:	81 91       	ld	r24, Z+
 18a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	4f ef       	ldi	r20, 0xFF	; 255
 18e:	89 e6       	ldi	r24, 0x69	; 105
 190:	98 e1       	ldi	r25, 0x18	; 24
 192:	41 50       	subi	r20, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <FND_test+0x12>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <FND_test+0x1c>
 19c:	00 00       	nop
	FND_PORT = 0b11111111;
	return;
}
void FND_test(void){
	
	for(int i=0;i<10;i++){
 19e:	e2 17       	cp	r30, r18
 1a0:	f3 07       	cpc	r31, r19
 1a2:	91 f7       	brne	.-28     	; 0x188 <FND_test+0x8>
		FND_PORT = FND_font[i];
		_delay_ms(500);
	}
	return;
 1a4:	08 95       	ret

000001a6 <main>:

extern int Dot_matrix_main(void);

int main(void)
{
    Dot_matrix_main();
 1a6:	0e 94 bb 00 	call	0x176	; 0x176 <Dot_matrix_main>
	
    while (1) 
    {
		FND_test();
 1aa:	0e 94 c0 00 	call	0x180	; 0x180 <FND_test>
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <main+0x4>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
