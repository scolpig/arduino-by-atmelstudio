
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  000011ec  00001280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080016a  0080016a  000012ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc7  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000135a  00000000  00000000  00003357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001507  00000000  00000000  000046b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00005bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dc  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010fe  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000784e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_1>
       8:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_2>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_14>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf ef       	ldi	r28, 0xFF	; 255
      86:	d8 e0       	ldi	r29, 0x08	; 8
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	ec ee       	ldi	r30, 0xEC	; 236
      94:	f1 e1       	ldi	r31, 0x11	; 17
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	aa 36       	cpi	r26, 0x6A	; 106
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	aa e6       	ldi	r26, 0x6A	; 106
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	a2 38       	cpi	r26, 0x82	; 130
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
      b6:	0c 94 f4 08 	jmp	0x11e8	; 0x11e8 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <ADC_converting_value>:
	}
	return 0;
}
int ADC_converting_value(char channel){
	int value = 0;
	ADMUX &= 0b11110000;
      be:	ec e7       	ldi	r30, 0x7C	; 124
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	90 81       	ld	r25, Z
      c4:	90 7f       	andi	r25, 0xF0	; 240
      c6:	90 83       	st	Z, r25
	ADMUX |= channel;
      c8:	90 81       	ld	r25, Z
      ca:	89 2b       	or	r24, r25
      cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ce:	8f e1       	ldi	r24, 0x1F	; 31
      d0:	93 e0       	ldi	r25, 0x03	; 3
      d2:	01 97       	sbiw	r24, 0x01	; 1
      d4:	f1 f7       	brne	.-4      	; 0xd2 <ADC_converting_value+0x14>
      d6:	00 c0       	rjmp	.+0      	; 0xd8 <ADC_converting_value+0x1a>
      d8:	00 00       	nop
	_delay_us(200);
	ADCSRA |= 1 << ADSC;
      da:	ea e7       	ldi	r30, 0x7A	; 122
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	80 64       	ori	r24, 0x40	; 64
      e2:	80 83       	st	Z, r24
	while(!(ADCSRA & (1 << ADIF)));
      e4:	80 81       	ld	r24, Z
      e6:	84 ff       	sbrs	r24, 4
      e8:	fd cf       	rjmp	.-6      	; 0xe4 <ADC_converting_value+0x26>
	value = 0;
	value = ADCL + ADCH * 256;
      ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ee:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	value = (value + 1) * 500.0 / 1024 + 3 ;
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	76 2f       	mov	r23, r22
      f6:	66 27       	eor	r22, r22
      f8:	68 0f       	add	r22, r24
      fa:	71 1d       	adc	r23, r1
      fc:	6f 5f       	subi	r22, 0xFF	; 255
      fe:	7f 4f       	sbci	r23, 0xFF	; 255
     100:	07 2e       	mov	r0, r23
     102:	00 0c       	add	r0, r0
     104:	88 0b       	sbc	r24, r24
     106:	99 0b       	sbc	r25, r25
     108:	0e 94 18 04 	call	0x830	; 0x830 <__floatsisf>
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	4a ef       	ldi	r20, 0xFA	; 250
     112:	53 e4       	ldi	r21, 0x43	; 67
     114:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3>
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	5a e3       	ldi	r21, 0x3A	; 58
     120:	0e 94 a4 04 	call	0x948	; 0x948 <__mulsf3>
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	40 e4       	ldi	r20, 0x40	; 64
     12a:	50 e4       	ldi	r21, 0x40	; 64
     12c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__addsf3>
	return value;
     130:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__fixsfsi>
}
     134:	cb 01       	movw	r24, r22
     136:	08 95       	ret

00000138 <ADC_init>:
void ADC_init(void){
	ADMUX |= 1 << REFS0;
     138:	ec e7       	ldi	r30, 0x7C	; 124
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	80 64       	ori	r24, 0x40	; 64
     140:	80 83       	st	Z, r24
	ADCSRA |= 1 << ADEN | 1 << ADPS0 | 1 << ADPS1 | 1 << ADPS2;
     142:	ea e7       	ldi	r30, 0x7A	; 122
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	87 68       	ori	r24, 0x87	; 135
     14a:	80 83       	st	Z, r24
     14c:	8f e1       	ldi	r24, 0x1F	; 31
     14e:	93 e0       	ldi	r25, 0x03	; 3
     150:	01 97       	sbiw	r24, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <ADC_init+0x18>
     154:	00 c0       	rjmp	.+0      	; 0x156 <ADC_init+0x1e>
     156:	00 00       	nop
     158:	08 95       	ret

0000015a <DHT11_rx_byte>:
		printf("Temperature : %d.%d \n", Tmpr_integral, Tmpr_decimal);
	}
	return 0;
}

char DHT11_rx_byte(void){
     15a:	28 e0       	ldi	r18, 0x08	; 8
     15c:	30 e0       	ldi	r19, 0x00	; 0
	char data = 0;
     15e:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0;i<8;i++){
		while(!(DHT11_data_PIN & (1 << DHT11_datapin)));
     160:	1c 9b       	sbis	0x03, 4	; 3
     162:	fe cf       	rjmp	.-4      	; 0x160 <DHT11_rx_byte+0x6>
     164:	90 ea       	ldi	r25, 0xA0	; 160
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <DHT11_rx_byte+0xc>
		_delay_us(30);
		data <<= 1;
     16a:	88 0f       	add	r24, r24
		if(DHT11_data_PIN & (1 << DHT11_datapin)){
     16c:	1c 99       	sbic	0x03, 4	; 3
			data |= 0b00000001;
     16e:	81 60       	ori	r24, 0x01	; 1
		}
		while(DHT11_data_PIN & (1 << DHT11_datapin));
     170:	1c 99       	sbic	0x03, 4	; 3
     172:	fe cf       	rjmp	.-4      	; 0x170 <DHT11_rx_byte+0x16>
     174:	21 50       	subi	r18, 0x01	; 1
     176:	31 09       	sbc	r19, r1
	return 0;
}

char DHT11_rx_byte(void){
	char data = 0;
	for(int i=0;i<8;i++){
     178:	99 f7       	brne	.-26     	; 0x160 <DHT11_rx_byte+0x6>
			data |= 0b00000001;
		}
		while(DHT11_data_PIN & (1 << DHT11_datapin));
	}
	return data;
}
     17a:	08 95       	ret

0000017c <DHT11_data_output>:
void DHT11_data_output(void){
	DHT11_data_DDR |= 1 << DHT11_datapin;
     17c:	24 9a       	sbi	0x04, 4	; 4
	DHT11_data_PORT |= 1 << DHT11_datapin;
     17e:	2c 9a       	sbi	0x05, 4	; 5
     180:	08 95       	ret

00000182 <DHT11_data_input>:
	return;
}
void DHT11_data_input(void){
	DHT11_data_DDR &= ~(1 << DHT11_datapin);
     182:	24 98       	cbi	0x04, 4	; 4
     184:	08 95       	ret

00000186 <DHT11_init>:
	return;
}
void DHT11_init(void){
	DHT11_data_DDR |= 1 << DHT11_datapin;
     186:	24 9a       	sbi	0x04, 4	; 4
	DHT11_data_PORT |= 1 << DHT11_datapin;
     188:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	8d e3       	ldi	r24, 0x3D	; 61
     18e:	99 e4       	ldi	r25, 0x49	; 73
     190:	21 50       	subi	r18, 0x01	; 1
     192:	80 40       	sbci	r24, 0x00	; 0
     194:	90 40       	sbci	r25, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <DHT11_init+0xa>
     198:	00 c0       	rjmp	.+0      	; 0x19a <DHT11_init+0x14>
     19a:	00 00       	nop
     19c:	08 95       	ret

0000019e <dumi_read>:
	_delay_ms(1500);
	return;
}
void dumi_read(void){
	while(DHT11_data_PIN & (1 << DHT11_datapin));
     19e:	1c 99       	sbic	0x03, 4	; 3
     1a0:	fe cf       	rjmp	.-4      	; 0x19e <dumi_read>
	while(!(DHT11_data_PIN & (1 << DHT11_datapin)));
     1a2:	1c 9b       	sbis	0x03, 4	; 3
     1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <dumi_read+0x4>
	while(DHT11_data_PIN & (1 << DHT11_datapin));
     1a6:	1c 99       	sbic	0x03, 4	; 3
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <dumi_read+0x8>
	return;
}
     1aa:	08 95       	ret

000001ac <DHT11_trigger>:
void DHT11_trigger(void){
	DHT11_data_PORT &= ~(1 << DHT11_datapin);
     1ac:	2c 98       	cbi	0x05, 4	; 5
     1ae:	2f ef       	ldi	r18, 0xFF	; 255
     1b0:	89 ef       	ldi	r24, 0xF9	; 249
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	21 50       	subi	r18, 0x01	; 1
     1b6:	80 40       	sbci	r24, 0x00	; 0
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <DHT11_trigger+0x8>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <DHT11_trigger+0x12>
     1be:	00 00       	nop
	_delay_ms(20);
	DHT11_data_PORT |= 1 << DHT11_datapin;
     1c0:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c2:	2a e1       	ldi	r18, 0x1A	; 26
     1c4:	2a 95       	dec	r18
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <DHT11_trigger+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <DHT11_trigger+0x1e>
     1ca:	08 95       	ret

000001cc <FND_update_time>:
	FND[1] = FND4digit_font[number/10%10];
	FND[2] = FND4digit_font[number/100%10];
	FND[3] = FND4digit_font[number/1000%10];
	return;
}
void FND_update_time(int msec, char sec){
     1cc:	0f 93       	push	r16
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	8c 01       	movw	r16, r24
     1d6:	26 2f       	mov	r18, r22
	FND[0] = FND4digit_font[msec/10%10];
     1d8:	ca e6       	ldi	r28, 0x6A	; 106
     1da:	d1 e0       	ldi	r29, 0x01	; 1
     1dc:	ea e0       	ldi	r30, 0x0A	; 10
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	bf 01       	movw	r22, r30
     1e2:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     1e6:	cb 01       	movw	r24, r22
     1e8:	bf 01       	movw	r22, r30
     1ea:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     1ee:	dc 01       	movw	r26, r24
     1f0:	a6 5f       	subi	r26, 0xF6	; 246
     1f2:	be 4f       	sbci	r27, 0xFE	; 254
     1f4:	8c 91       	ld	r24, X
     1f6:	88 83       	st	Y, r24
	FND[1] = FND4digit_font[msec/100%10];
     1f8:	c8 01       	movw	r24, r16
     1fa:	64 e6       	ldi	r22, 0x64	; 100
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     202:	cb 01       	movw	r24, r22
     204:	bf 01       	movw	r22, r30
     206:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     20a:	fc 01       	movw	r30, r24
     20c:	e6 5f       	subi	r30, 0xF6	; 246
     20e:	fe 4f       	sbci	r31, 0xFE	; 254
     210:	80 81       	ld	r24, Z
     212:	89 83       	std	Y+1, r24	; 0x01
	FND[2] = FND4digit_font[sec%10] & ~(1 << FND_p);
     214:	8d ec       	ldi	r24, 0xCD	; 205
     216:	28 9f       	mul	r18, r24
     218:	e1 2d       	mov	r30, r1
     21a:	11 24       	eor	r1, r1
     21c:	e6 95       	lsr	r30
     21e:	e6 95       	lsr	r30
     220:	e6 95       	lsr	r30
     222:	3e 2f       	mov	r19, r30
     224:	33 0f       	add	r19, r19
     226:	93 2f       	mov	r25, r19
     228:	99 0f       	add	r25, r25
     22a:	99 0f       	add	r25, r25
     22c:	93 0f       	add	r25, r19
     22e:	29 1b       	sub	r18, r25
     230:	a2 2f       	mov	r26, r18
     232:	b0 e0       	ldi	r27, 0x00	; 0
     234:	a6 5f       	subi	r26, 0xF6	; 246
     236:	be 4f       	sbci	r27, 0xFE	; 254
     238:	9c 91       	ld	r25, X
     23a:	9b 7f       	andi	r25, 0xFB	; 251
     23c:	9a 83       	std	Y+2, r25	; 0x02
	FND[3] = FND4digit_font[sec/10%10];
     23e:	e8 9f       	mul	r30, r24
     240:	81 2d       	mov	r24, r1
     242:	11 24       	eor	r1, r1
     244:	86 95       	lsr	r24
     246:	86 95       	lsr	r24
     248:	86 95       	lsr	r24
     24a:	88 0f       	add	r24, r24
     24c:	98 2f       	mov	r25, r24
     24e:	99 0f       	add	r25, r25
     250:	99 0f       	add	r25, r25
     252:	89 0f       	add	r24, r25
     254:	e8 1b       	sub	r30, r24
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	e6 5f       	subi	r30, 0xF6	; 246
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	80 81       	ld	r24, Z
     25e:	8b 83       	std	Y+3, r24	; 0x03
	return;
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	0f 91       	pop	r16
     268:	08 95       	ret

0000026a <__vector_1>:
#include "HC_SR04.h"
#include "External_INT.h"

char echo_time;

ISR(INT0_vect){
     26a:	1f 92       	push	r1
     26c:	0f 92       	push	r0
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	0f 92       	push	r0
     272:	11 24       	eor	r1, r1
	TCNT0 = 0;
     274:	16 bc       	out	0x26, r1	; 38
}
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti

00000280 <__vector_2>:
ISR(INT1_vect){
     280:	1f 92       	push	r1
     282:	0f 92       	push	r0
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	0f 92       	push	r0
     288:	11 24       	eor	r1, r1
     28a:	8f 93       	push	r24
	echo_time = TCNT0;
     28c:	86 b5       	in	r24, 0x26	; 38
     28e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <echo_time>
}
     292:	8f 91       	pop	r24
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <Keypad_init>:
			}
		}
	}
}
void Keypad_init(void){
	Keypad_PORT_DDR |= 0b11110000;
     29e:	8a b1       	in	r24, 0x0a	; 10
     2a0:	80 6f       	ori	r24, 0xF0	; 240
     2a2:	8a b9       	out	0x0a, r24	; 10
	Keypad_PORT |= 0b11110000;
     2a4:	8b b1       	in	r24, 0x0b	; 11
     2a6:	80 6f       	ori	r24, 0xF0	; 240
     2a8:	8b b9       	out	0x0b, r24	; 11
	Keypad_PIN_DDR &= 0b11110000;
     2aa:	84 b1       	in	r24, 0x04	; 4
     2ac:	80 7f       	andi	r24, 0xF0	; 240
     2ae:	84 b9       	out	0x04, r24	; 4
	Keypad_PIN_PORT |= 0b00001111;
     2b0:	85 b1       	in	r24, 0x05	; 5
     2b2:	8f 60       	ori	r24, 0x0F	; 15
     2b4:	85 b9       	out	0x05, r24	; 5
     2b6:	08 95       	ret

000002b8 <Keyscan_sub>:
}
char Keyscan_sub(void){
	if(!(Keypad_PIN & 0b00000001))return 1;
     2b8:	18 9b       	sbis	0x03, 0	; 3
     2ba:	08 c0       	rjmp	.+16     	; 0x2cc <Keyscan_sub+0x14>
	else if(!(Keypad_PIN & 0b00000010))return 2;
     2bc:	19 9b       	sbis	0x03, 1	; 3
     2be:	08 c0       	rjmp	.+16     	; 0x2d0 <Keyscan_sub+0x18>
	else if(!(Keypad_PIN & 0b00000100))return 3;
     2c0:	1a 9b       	sbis	0x03, 2	; 3
     2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <Keyscan_sub+0x1c>
	else if(!(Keypad_PIN & 0b00001000))return 4;
     2c4:	1b 9b       	sbis	0x03, 3	; 3
     2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <Keyscan_sub+0x20>
	else return 0;
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	08 95       	ret
	Keypad_PORT |= 0b11110000;
	Keypad_PIN_DDR &= 0b11110000;
	Keypad_PIN_PORT |= 0b00001111;
}
char Keyscan_sub(void){
	if(!(Keypad_PIN & 0b00000001))return 1;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	08 95       	ret
	else if(!(Keypad_PIN & 0b00000010))return 2;
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	08 95       	ret
	else if(!(Keypad_PIN & 0b00000100))return 3;
     2d4:	83 e0       	ldi	r24, 0x03	; 3
     2d6:	08 95       	ret
	else if(!(Keypad_PIN & 0b00001000))return 4;
     2d8:	84 e0       	ldi	r24, 0x04	; 4
	else return 0;
}
     2da:	08 95       	ret

000002dc <Keyscan>:
char Keyscan(void){
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
	char data;
	for(int i=0;i<4;i++){
     2e4:	c0 e0       	ldi	r28, 0x00	; 0
     2e6:	d0 e0       	ldi	r29, 0x00	; 0
		Keypad_PORT |= 0b11110000;
		Keypad_PORT &= ~(0b10000000>>i);
     2e8:	00 e8       	ldi	r16, 0x80	; 128
     2ea:	10 e0       	ldi	r17, 0x00	; 0
	else return 0;
}
char Keyscan(void){
	char data;
	for(int i=0;i<4;i++){
		Keypad_PORT |= 0b11110000;
     2ec:	8b b1       	in	r24, 0x0b	; 11
     2ee:	80 6f       	ori	r24, 0xF0	; 240
     2f0:	8b b9       	out	0x0b, r24	; 11
		Keypad_PORT &= ~(0b10000000>>i);
     2f2:	9b b1       	in	r25, 0x0b	; 11
     2f4:	98 01       	movw	r18, r16
     2f6:	0c 2e       	mov	r0, r28
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <Keyscan+0x22>
     2fa:	35 95       	asr	r19
     2fc:	27 95       	ror	r18
     2fe:	0a 94       	dec	r0
     300:	e2 f7       	brpl	.-8      	; 0x2fa <Keyscan+0x1e>
     302:	82 2f       	mov	r24, r18
     304:	80 95       	com	r24
     306:	89 23       	and	r24, r25
     308:	8b b9       	out	0x0b, r24	; 11
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	8a 95       	dec	r24
     30e:	f1 f7       	brne	.-4      	; 0x30c <Keyscan+0x30>
     310:	00 00       	nop
		_delay_us(1);
		if(Keyscan_sub())return 'A' + Keyscan_sub() + i*4;
     312:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Keyscan_sub>
     316:	88 23       	and	r24, r24
     318:	39 f0       	breq	.+14     	; 0x328 <Keyscan+0x4c>
     31a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <Keyscan_sub>
     31e:	8f 5b       	subi	r24, 0xBF	; 191
     320:	cc 0f       	add	r28, r28
     322:	cc 0f       	add	r28, r28
     324:	8c 0f       	add	r24, r28
     326:	05 c0       	rjmp	.+10     	; 0x332 <Keyscan+0x56>
	else if(!(Keypad_PIN & 0b00001000))return 4;
	else return 0;
}
char Keyscan(void){
	char data;
	for(int i=0;i<4;i++){
     328:	21 96       	adiw	r28, 0x01	; 1
     32a:	c4 30       	cpi	r28, 0x04	; 4
     32c:	d1 05       	cpc	r29, r1
     32e:	f1 f6       	brne	.-68     	; 0x2ec <Keyscan+0x10>
		Keypad_PORT |= 0b11110000;
		Keypad_PORT &= ~(0b10000000>>i);
		_delay_us(1);
		if(Keyscan_sub())return 'A' + Keyscan_sub() + i*4;
	}
	return 'A';
     330:	81 e4       	ldi	r24, 0x41	; 65
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	08 95       	ret

0000033c <main>:

extern int measure_main(void);

int main(void)
{
    measure_main();
     33c:	0e 94 a1 01 	call	0x342	; 0x342 <measure_main>
     340:	ff cf       	rjmp	.-2      	; 0x340 <main+0x4>

00000342 <measure_main>:
	
	char long_key_flag = 0;
	char RH_integral=0, RH_decimal=0, Tmpr_integral=0, Tmpr_decimal=0;
	int value=0;
	
	Keypad_init();
     342:	0e 94 4f 01 	call	0x29e	; 0x29e <Keypad_init>
	UART0_init(9600);
     346:	60 e8       	ldi	r22, 0x80	; 128
     348:	75 e2       	ldi	r23, 0x25	; 37
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 3a 03 	call	0x674	; 0x674 <UART0_init>
	DHT11_init();
     352:	0e 94 c3 00 	call	0x186	; 0x186 <DHT11_init>
	ADC_init();
     356:	0e 94 9c 00 	call	0x138	; 0x138 <ADC_init>
#include "Uart.h"
#include "ADC.h"

int measure_main(void){
	
	char long_key_flag = 0;
     35a:	71 2c       	mov	r7, r1
					Tmpr_decimal = DHT11_rx_byte();
					DHT11_rx_byte();
					DHT11_data_output();
					printf("RH : %d.%d%% \n", RH_integral, RH_decimal);
					_delay_ms(1500);
					long_key_flag = 0;
     35c:	55 24       	eor	r5, r5
     35e:	53 94       	inc	r5
     360:	61 2c       	mov	r6, r1
					printf("Potentiometer : %d.%d%dV \n", value/100%10, value/10%10, value%10);
					long_key_flag = 0;
				}
				else if(Keyscan() == 'E'){
					value = ADC_converting_value(1);
					printf("CDS value : %d.%d%dV \n", value/100%10, value/10%10, value%10);
     362:	ca e0       	ldi	r28, 0x0A	; 10
     364:	d0 e0       	ldi	r29, 0x00	; 0
     366:	0f 2e       	mov	r0, r31
     368:	f4 e6       	ldi	r31, 0x64	; 100
     36a:	8f 2e       	mov	r8, r31
     36c:	91 2c       	mov	r9, r1
     36e:	f0 2d       	mov	r31, r0
     370:	0f 2e       	mov	r0, r31
     372:	f2 e5       	ldi	r31, 0x52	; 82
     374:	af 2e       	mov	r10, r31
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	bf 2e       	mov	r11, r31
     37a:	f0 2d       	mov	r31, r0
					_delay_ms(1500);
					long_key_flag = 0;
				}
				else if(Keyscan() == 'D'){
					value = ADC_converting_value(0);
					printf("Potentiometer : %d.%d%dV \n", value/100%10, value/10%10, value%10);
     37c:	0f 2e       	mov	r0, r31
     37e:	f7 e3       	ldi	r31, 0x37	; 55
     380:	cf 2e       	mov	r12, r31
     382:	f1 e0       	ldi	r31, 0x01	; 1
     384:	df 2e       	mov	r13, r31
     386:	f0 2d       	mov	r31, r0
					RH_decimal = DHT11_rx_byte();
					Tmpr_integral = DHT11_rx_byte();
					Tmpr_decimal = DHT11_rx_byte();
					DHT11_rx_byte();
					DHT11_data_output();
					printf("Temperature : %d.%d", Tmpr_integral, Tmpr_decimal);
     388:	0f 2e       	mov	r0, r31
     38a:	f3 e2       	ldi	r31, 0x23	; 35
     38c:	ef 2e       	mov	r14, r31
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
					RH_decimal = DHT11_rx_byte();
					Tmpr_integral = DHT11_rx_byte();
					Tmpr_decimal = DHT11_rx_byte();
					DHT11_rx_byte();
					DHT11_data_output();
					printf("RH : %d.%d%% \n", RH_integral, RH_decimal);
     394:	04 e1       	ldi	r16, 0x14	; 20
     396:	11 e0       	ldi	r17, 0x01	; 1
	UART0_init(9600);
	DHT11_init();
	ADC_init();
	
	while(1){
		if(long_key_flag){
     398:	77 20       	and	r7, r7
     39a:	09 f4       	brne	.+2      	; 0x39e <measure_main+0x5c>
     39c:	c6 c0       	rjmp	.+396    	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			if(Keyscan() != 'A'){
     39e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keyscan>
     3a2:	81 34       	cpi	r24, 0x41	; 65
     3a4:	c9 f3       	breq	.-14     	; 0x398 <measure_main+0x56>
				//TX0_char(Keyscan());
				if(Keyscan() == 'B'){
     3a6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keyscan>
     3aa:	82 34       	cpi	r24, 0x42	; 66
     3ac:	69 f5       	brne	.+90     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
					DHT11_trigger();
     3ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DHT11_trigger>
					DHT11_data_input();
     3b2:	0e 94 c1 00 	call	0x182	; 0x182 <DHT11_data_input>
					dumi_read();
     3b6:	0e 94 cf 00 	call	0x19e	; 0x19e <dumi_read>
					RH_integral = DHT11_rx_byte();
     3ba:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
     3be:	78 2e       	mov	r7, r24
					RH_decimal = DHT11_rx_byte();
     3c0:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
     3c4:	48 2e       	mov	r4, r24
					Tmpr_integral = DHT11_rx_byte();
     3c6:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
					Tmpr_decimal = DHT11_rx_byte();
     3ca:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
					DHT11_rx_byte();
     3ce:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
					DHT11_data_output();
     3d2:	0e 94 be 00 	call	0x17c	; 0x17c <DHT11_data_output>
					printf("RH : %d.%d%% \n", RH_integral, RH_decimal);
     3d6:	1f 92       	push	r1
     3d8:	4f 92       	push	r4
     3da:	1f 92       	push	r1
     3dc:	7f 92       	push	r7
     3de:	1f 93       	push	r17
     3e0:	0f 93       	push	r16
     3e2:	0e 94 3c 07 	call	0xe78	; 0xe78 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e6:	2f ef       	ldi	r18, 0xFF	; 255
     3e8:	8d e3       	ldi	r24, 0x3D	; 61
     3ea:	99 e4       	ldi	r25, 0x49	; 73
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	80 40       	sbci	r24, 0x00	; 0
     3f0:	90 40       	sbci	r25, 0x00	; 0
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <measure_main+0xaa>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <measure_main+0xb4>
     3f6:	00 00       	nop
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
					_delay_ms(1500);
					long_key_flag = 0;
     404:	76 2c       	mov	r7, r6
     406:	c8 cf       	rjmp	.-112    	; 0x398 <measure_main+0x56>
				}
				else if(Keyscan() == 'C'){
     408:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keyscan>
     40c:	83 34       	cpi	r24, 0x43	; 67
     40e:	b1 f5       	brne	.+108    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
					DHT11_trigger();
     410:	0e 94 d6 00 	call	0x1ac	; 0x1ac <DHT11_trigger>
					DHT11_data_input();
     414:	0e 94 c1 00 	call	0x182	; 0x182 <DHT11_data_input>
					dumi_read();
     418:	0e 94 cf 00 	call	0x19e	; 0x19e <dumi_read>
					RH_integral = DHT11_rx_byte();
     41c:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
					RH_decimal = DHT11_rx_byte();
     420:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
					Tmpr_integral = DHT11_rx_byte();
     424:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
     428:	78 2e       	mov	r7, r24
					Tmpr_decimal = DHT11_rx_byte();
     42a:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
     42e:	48 2e       	mov	r4, r24
					DHT11_rx_byte();
     430:	0e 94 ad 00 	call	0x15a	; 0x15a <DHT11_rx_byte>
					DHT11_data_output();
     434:	0e 94 be 00 	call	0x17c	; 0x17c <DHT11_data_output>
					printf("Temperature : %d.%d", Tmpr_integral, Tmpr_decimal);
     438:	1f 92       	push	r1
     43a:	4f 92       	push	r4
     43c:	1f 92       	push	r1
     43e:	7f 92       	push	r7
     440:	ff 92       	push	r15
     442:	ef 92       	push	r14
     444:	0e 94 3c 07 	call	0xe78	; 0xe78 <printf>
					TX0_char(39);
     448:	87 e2       	ldi	r24, 0x27	; 39
     44a:	0e 94 32 03 	call	0x664	; 0x664 <TX0_char>
					TX0_char('C');
     44e:	83 e4       	ldi	r24, 0x43	; 67
     450:	0e 94 32 03 	call	0x664	; 0x664 <TX0_char>
					TX0_char('\n');
     454:	8a e0       	ldi	r24, 0x0A	; 10
     456:	0e 94 32 03 	call	0x664	; 0x664 <TX0_char>
     45a:	2f ef       	ldi	r18, 0xFF	; 255
     45c:	8d e3       	ldi	r24, 0x3D	; 61
     45e:	99 e4       	ldi	r25, 0x49	; 73
     460:	21 50       	subi	r18, 0x01	; 1
     462:	80 40       	sbci	r24, 0x00	; 0
     464:	90 40       	sbci	r25, 0x00	; 0
     466:	e1 f7       	brne	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     46a:	00 00       	nop
     46c:	0f 90       	pop	r0
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
					_delay_ms(1500);
					long_key_flag = 0;
     478:	76 2c       	mov	r7, r6
     47a:	8e cf       	rjmp	.-228    	; 0x398 <measure_main+0x56>
				}
				else if(Keyscan() == 'D'){
     47c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keyscan>
     480:	84 34       	cpi	r24, 0x44	; 68
     482:	39 f5       	brne	.+78     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
					value = ADC_converting_value(0);
     484:	86 2d       	mov	r24, r6
     486:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_converting_value>
     48a:	9c 01       	movw	r18, r24
					printf("Potentiometer : %d.%d%dV \n", value/100%10, value/10%10, value%10);
     48c:	be 01       	movw	r22, r28
     48e:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     492:	9f 93       	push	r25
     494:	8f 93       	push	r24
     496:	cb 01       	movw	r24, r22
     498:	be 01       	movw	r22, r28
     49a:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	c9 01       	movw	r24, r18
     4a4:	b4 01       	movw	r22, r8
     4a6:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     4aa:	cb 01       	movw	r24, r22
     4ac:	be 01       	movw	r22, r28
     4ae:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     4b2:	9f 93       	push	r25
     4b4:	8f 93       	push	r24
     4b6:	df 92       	push	r13
     4b8:	cf 92       	push	r12
     4ba:	0e 94 3c 07 	call	0xe78	; 0xe78 <printf>
     4be:	8d b7       	in	r24, 0x3d	; 61
     4c0:	9e b7       	in	r25, 0x3e	; 62
     4c2:	08 96       	adiw	r24, 0x08	; 8
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	9e bf       	out	0x3e, r25	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	8d bf       	out	0x3d, r24	; 61
					long_key_flag = 0;
     4ce:	76 2c       	mov	r7, r6
     4d0:	63 cf       	rjmp	.-314    	; 0x398 <measure_main+0x56>
				}
				else if(Keyscan() == 'E'){
     4d2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keyscan>
     4d6:	85 34       	cpi	r24, 0x45	; 69
     4d8:	09 f0       	breq	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4da:	5e cf       	rjmp	.-324    	; 0x398 <measure_main+0x56>
					value = ADC_converting_value(1);
     4dc:	85 2d       	mov	r24, r5
     4de:	0e 94 5f 00 	call	0xbe	; 0xbe <ADC_converting_value>
     4e2:	9c 01       	movw	r18, r24
					printf("CDS value : %d.%d%dV \n", value/100%10, value/10%10, value%10);
     4e4:	be 01       	movw	r22, r28
     4e6:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	be 01       	movw	r22, r28
     4f2:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     4f6:	9f 93       	push	r25
     4f8:	8f 93       	push	r24
     4fa:	c9 01       	movw	r24, r18
     4fc:	b4 01       	movw	r22, r8
     4fe:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     502:	cb 01       	movw	r24, r22
     504:	be 01       	movw	r22, r28
     506:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	bf 92       	push	r11
     510:	af 92       	push	r10
     512:	0e 94 3c 07 	call	0xe78	; 0xe78 <printf>
     516:	8d b7       	in	r24, 0x3d	; 61
     518:	9e b7       	in	r25, 0x3e	; 62
     51a:	08 96       	adiw	r24, 0x08	; 8
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	9e bf       	out	0x3e, r25	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	8d bf       	out	0x3d, r24	; 61
					long_key_flag = 0;
     526:	76 2c       	mov	r7, r6
     528:	37 cf       	rjmp	.-402    	; 0x398 <measure_main+0x56>
				}
				
			}
		}
		else {
			if(Keyscan() == 'A'){
     52a:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Keyscan>
					Tmpr_decimal = DHT11_rx_byte();
					DHT11_rx_byte();
					DHT11_data_output();
					printf("RH : %d.%d%% \n", RH_integral, RH_decimal);
					_delay_ms(1500);
					long_key_flag = 0;
     52e:	75 2c       	mov	r7, r5
     530:	81 34       	cpi	r24, 0x41	; 65
     532:	09 f4       	brne	.+2      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     534:	31 cf       	rjmp	.-414    	; 0x398 <measure_main+0x56>
     536:	76 2c       	mov	r7, r6
     538:	2f cf       	rjmp	.-418    	; 0x398 <measure_main+0x56>

0000053a <__vector_14>:

volatile char start_flag, lap_flag, clear_flag, time_flag;
volatile int msec;
volatile char i, sec, min;

ISR(TIMER0_COMPA_vect){
     53a:	1f 92       	push	r1
     53c:	0f 92       	push	r0
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	0f 92       	push	r0
     542:	11 24       	eor	r1, r1
     544:	2f 93       	push	r18
     546:	3f 93       	push	r19
     548:	4f 93       	push	r20
     54a:	5f 93       	push	r21
     54c:	6f 93       	push	r22
     54e:	7f 93       	push	r23
     550:	8f 93       	push	r24
     552:	9f 93       	push	r25
     554:	af 93       	push	r26
     556:	bf 93       	push	r27
     558:	ef 93       	push	r30
     55a:	ff 93       	push	r31
	
	if(start_flag)msec++;
     55c:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <start_flag>
     560:	88 23       	and	r24, r24
     562:	49 f0       	breq	.+18     	; 0x576 <__vector_14+0x3c>
     564:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <msec>
     568:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <msec+0x1>
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <msec+0x1>
     572:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <msec>
	if(msec >= 1000){
     576:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <msec>
     57a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <msec+0x1>
     57e:	88 3e       	cpi	r24, 0xE8	; 232
     580:	93 40       	sbci	r25, 0x03	; 3
     582:	d4 f0       	brlt	.+52     	; 0x5b8 <__vector_14+0x7e>
		msec = 0;
     584:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <msec+0x1>
     588:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec>
		sec++;
     58c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <sec>
     590:	8f 5f       	subi	r24, 0xFF	; 255
     592:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <sec>
		if(sec >= 60){
     596:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <sec>
     59a:	8c 33       	cpi	r24, 0x3C	; 60
     59c:	68 f0       	brcs	.+26     	; 0x5b8 <__vector_14+0x7e>
			sec = 0;
     59e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <sec>
			min++;
     5a2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <min>
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <min>
			if(min >= 60)min = 0;
     5ac:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <min>
     5b0:	8c 33       	cpi	r24, 0x3C	; 60
     5b2:	10 f0       	brcs	.+4      	; 0x5b8 <__vector_14+0x7e>
     5b4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <min>
		}
		//FND_clock(sec, min);
	}
	if(!(msec%10)){
     5b8:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <msec>
     5bc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <msec+0x1>
     5c0:	6a e0       	ldi	r22, 0x0A	; 10
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	0e 94 29 06 	call	0xc52	; 0xc52 <__divmodhi4>
     5c8:	89 2b       	or	r24, r25
     5ca:	39 f4       	brne	.+14     	; 0x5da <__vector_14+0xa0>
		if(lap_flag)time_flag = 1;
     5cc:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <lap_flag>
     5d0:	88 23       	and	r24, r24
     5d2:	19 f0       	breq	.+6      	; 0x5da <__vector_14+0xa0>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <time_flag>
	}
	if(clear_flag){
     5da:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <clear_flag>
     5de:	88 23       	and	r24, r24
     5e0:	91 f0       	breq	.+36     	; 0x606 <__vector_14+0xcc>
		clear_flag = 0;
     5e2:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <clear_flag>
		//time_flag = 1;
		FND_update_time(msec, sec);
     5e6:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <sec>
     5ea:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <msec>
     5ee:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <msec+0x1>
     5f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <FND_update_time>
		msec = 0;
     5f6:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <msec+0x1>
     5fa:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <msec>
		sec = 0;
     5fe:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <sec>
		min = 0;
     602:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <min>
	}
	i++;
     606:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i>
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <i>
	if(i>=4)i=0;
     610:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <i>
     614:	84 30       	cpi	r24, 0x04	; 4
     616:	10 f0       	brcs	.+4      	; 0x61c <__vector_14+0xe2>
     618:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <i>
	FND_COM_PORT &= 0b11110000;
     61c:	85 b1       	in	r24, 0x05	; 5
     61e:	80 7f       	andi	r24, 0xF0	; 240
     620:	85 b9       	out	0x05, r24	; 5
	FND_COM_PORT |= FND4digit_digit[i];
     622:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <i>
     626:	95 b1       	in	r25, 0x05	; 5
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	ea 5f       	subi	r30, 0xFA	; 250
     62c:	fe 4f       	sbci	r31, 0xFE	; 254
     62e:	80 81       	ld	r24, Z
     630:	89 2b       	or	r24, r25
     632:	85 b9       	out	0x05, r24	; 5
	FND_DATA_PORT = FND[i];
     634:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <i>
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	e6 59       	subi	r30, 0x96	; 150
     63c:	fe 4f       	sbci	r31, 0xFE	; 254
     63e:	80 81       	ld	r24, Z
     640:	8b b9       	out	0x0b, r24	; 11
	//if(!(msec%500))PORTB ^= 1<<PORTB5;
}
     642:	ff 91       	pop	r31
     644:	ef 91       	pop	r30
     646:	bf 91       	pop	r27
     648:	af 91       	pop	r26
     64a:	9f 91       	pop	r25
     64c:	8f 91       	pop	r24
     64e:	7f 91       	pop	r23
     650:	6f 91       	pop	r22
     652:	5f 91       	pop	r21
     654:	4f 91       	pop	r20
     656:	3f 91       	pop	r19
     658:	2f 91       	pop	r18
     65a:	0f 90       	pop	r0
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	0f 90       	pop	r0
     660:	1f 90       	pop	r1
     662:	18 95       	reti

00000664 <TX0_char>:
	TX0_char('0' + data/1000%10);
	TX0_char('0' + data/100%10);
	TX0_char('0' + data/10%10);
	TX0_char('0' + data%10);
	return;
}
     664:	e0 ec       	ldi	r30, 0xC0	; 192
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	90 81       	ld	r25, Z
     66a:	95 ff       	sbrs	r25, 5
     66c:	fd cf       	rjmp	.-6      	; 0x668 <TX0_char+0x4>
     66e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     672:	08 95       	ret

00000674 <UART0_init>:
void UART0_init(unsigned long baud){
     674:	cf 92       	push	r12
     676:	df 92       	push	r13
     678:	ef 92       	push	r14
     67a:	ff 92       	push	r15
     67c:	6b 01       	movw	r12, r22
     67e:	7c 01       	movw	r14, r24
	FILE* fpStdio = fdevopen(TX0_char, NULL);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	82 e3       	ldi	r24, 0x32	; 50
     686:	93 e0       	ldi	r25, 0x03	; 3
     688:	0e 94 b5 06 	call	0xd6a	; 0xd6a <fdevopen>
	char i;
	UCSR0B |= 1 << RXCIE0 | 1 << RXEN0 | 1 << TXEN0; //송신, 수신, 수신 인터럽트 활성화
     68c:	e1 ec       	ldi	r30, 0xC1	; 193
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	88 69       	ori	r24, 0x98	; 152
     694:	80 83       	st	Z, r24
	UCSR0C |= 1 << UCSZ00 | 1 << UCSZ01;			 //8비트 통신
     696:	e2 ec       	ldi	r30, 0xC2	; 194
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	86 60       	ori	r24, 0x06	; 6
     69e:	80 83       	st	Z, r24
	
	UBRR0H = (F_CPU/16/baud-1) >> 8;
     6a0:	60 e4       	ldi	r22, 0x40	; 64
     6a2:	72 e4       	ldi	r23, 0x42	; 66
     6a4:	8f e0       	ldi	r24, 0x0F	; 15
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	a7 01       	movw	r20, r14
     6aa:	96 01       	movw	r18, r12
     6ac:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__udivmodsi4>
     6b0:	da 01       	movw	r26, r20
     6b2:	c9 01       	movw	r24, r18
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	a1 09       	sbc	r26, r1
     6b8:	b1 09       	sbc	r27, r1
     6ba:	89 2f       	mov	r24, r25
     6bc:	9a 2f       	mov	r25, r26
     6be:	ab 2f       	mov	r26, r27
     6c0:	bb 27       	eor	r27, r27
     6c2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (F_CPU/16/baud-1) & 0xFF;
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	i = UDR0;
     6cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     6d0:	8f e9       	ldi	r24, 0x9F	; 159
     6d2:	9f e0       	ldi	r25, 0x0F	; 15
     6d4:	01 97       	sbiw	r24, 0x01	; 1
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <UART0_init+0x60>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <UART0_init+0x66>
     6da:	00 00       	nop
	_delay_ms(1);
	return;
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	df 90       	pop	r13
     6e2:	cf 90       	pop	r12
     6e4:	08 95       	ret

000006e6 <__subsf3>:
     6e6:	50 58       	subi	r21, 0x80	; 128

000006e8 <__addsf3>:
     6e8:	bb 27       	eor	r27, r27
     6ea:	aa 27       	eor	r26, r26
     6ec:	0e 94 8b 03 	call	0x716	; 0x716 <__addsf3x>
     6f0:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_round>
     6f4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscA>
     6f8:	38 f0       	brcs	.+14     	; 0x708 <__addsf3+0x20>
     6fa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_pscB>
     6fe:	20 f0       	brcs	.+8      	; 0x708 <__addsf3+0x20>
     700:	39 f4       	brne	.+14     	; 0x710 <__addsf3+0x28>
     702:	9f 3f       	cpi	r25, 0xFF	; 255
     704:	19 f4       	brne	.+6      	; 0x70c <__addsf3+0x24>
     706:	26 f4       	brtc	.+8      	; 0x710 <__addsf3+0x28>
     708:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_nan>
     70c:	0e f4       	brtc	.+2      	; 0x710 <__addsf3+0x28>
     70e:	e0 95       	com	r30
     710:	e7 fb       	bst	r30, 7
     712:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_inf>

00000716 <__addsf3x>:
     716:	e9 2f       	mov	r30, r25
     718:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_split3>
     71c:	58 f3       	brcs	.-42     	; 0x6f4 <__addsf3+0xc>
     71e:	ba 17       	cp	r27, r26
     720:	62 07       	cpc	r22, r18
     722:	73 07       	cpc	r23, r19
     724:	84 07       	cpc	r24, r20
     726:	95 07       	cpc	r25, r21
     728:	20 f0       	brcs	.+8      	; 0x732 <__addsf3x+0x1c>
     72a:	79 f4       	brne	.+30     	; 0x74a <__addsf3x+0x34>
     72c:	a6 f5       	brtc	.+104    	; 0x796 <__addsf3x+0x80>
     72e:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__fp_zero>
     732:	0e f4       	brtc	.+2      	; 0x736 <__addsf3x+0x20>
     734:	e0 95       	com	r30
     736:	0b 2e       	mov	r0, r27
     738:	ba 2f       	mov	r27, r26
     73a:	a0 2d       	mov	r26, r0
     73c:	0b 01       	movw	r0, r22
     73e:	b9 01       	movw	r22, r18
     740:	90 01       	movw	r18, r0
     742:	0c 01       	movw	r0, r24
     744:	ca 01       	movw	r24, r20
     746:	a0 01       	movw	r20, r0
     748:	11 24       	eor	r1, r1
     74a:	ff 27       	eor	r31, r31
     74c:	59 1b       	sub	r21, r25
     74e:	99 f0       	breq	.+38     	; 0x776 <__addsf3x+0x60>
     750:	59 3f       	cpi	r21, 0xF9	; 249
     752:	50 f4       	brcc	.+20     	; 0x768 <__addsf3x+0x52>
     754:	50 3e       	cpi	r21, 0xE0	; 224
     756:	68 f1       	brcs	.+90     	; 0x7b2 <__addsf3x+0x9c>
     758:	1a 16       	cp	r1, r26
     75a:	f0 40       	sbci	r31, 0x00	; 0
     75c:	a2 2f       	mov	r26, r18
     75e:	23 2f       	mov	r18, r19
     760:	34 2f       	mov	r19, r20
     762:	44 27       	eor	r20, r20
     764:	58 5f       	subi	r21, 0xF8	; 248
     766:	f3 cf       	rjmp	.-26     	; 0x74e <__addsf3x+0x38>
     768:	46 95       	lsr	r20
     76a:	37 95       	ror	r19
     76c:	27 95       	ror	r18
     76e:	a7 95       	ror	r26
     770:	f0 40       	sbci	r31, 0x00	; 0
     772:	53 95       	inc	r21
     774:	c9 f7       	brne	.-14     	; 0x768 <__addsf3x+0x52>
     776:	7e f4       	brtc	.+30     	; 0x796 <__addsf3x+0x80>
     778:	1f 16       	cp	r1, r31
     77a:	ba 0b       	sbc	r27, r26
     77c:	62 0b       	sbc	r22, r18
     77e:	73 0b       	sbc	r23, r19
     780:	84 0b       	sbc	r24, r20
     782:	ba f0       	brmi	.+46     	; 0x7b2 <__addsf3x+0x9c>
     784:	91 50       	subi	r25, 0x01	; 1
     786:	a1 f0       	breq	.+40     	; 0x7b0 <__addsf3x+0x9a>
     788:	ff 0f       	add	r31, r31
     78a:	bb 1f       	adc	r27, r27
     78c:	66 1f       	adc	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	88 1f       	adc	r24, r24
     792:	c2 f7       	brpl	.-16     	; 0x784 <__addsf3x+0x6e>
     794:	0e c0       	rjmp	.+28     	; 0x7b2 <__addsf3x+0x9c>
     796:	ba 0f       	add	r27, r26
     798:	62 1f       	adc	r22, r18
     79a:	73 1f       	adc	r23, r19
     79c:	84 1f       	adc	r24, r20
     79e:	48 f4       	brcc	.+18     	; 0x7b2 <__addsf3x+0x9c>
     7a0:	87 95       	ror	r24
     7a2:	77 95       	ror	r23
     7a4:	67 95       	ror	r22
     7a6:	b7 95       	ror	r27
     7a8:	f7 95       	ror	r31
     7aa:	9e 3f       	cpi	r25, 0xFE	; 254
     7ac:	08 f0       	brcs	.+2      	; 0x7b0 <__addsf3x+0x9a>
     7ae:	b0 cf       	rjmp	.-160    	; 0x710 <__addsf3+0x28>
     7b0:	93 95       	inc	r25
     7b2:	88 0f       	add	r24, r24
     7b4:	08 f0       	brcs	.+2      	; 0x7b8 <__addsf3x+0xa2>
     7b6:	99 27       	eor	r25, r25
     7b8:	ee 0f       	add	r30, r30
     7ba:	97 95       	ror	r25
     7bc:	87 95       	ror	r24
     7be:	08 95       	ret

000007c0 <__fixsfsi>:
     7c0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__fixunssfsi>
     7c4:	68 94       	set
     7c6:	b1 11       	cpse	r27, r1
     7c8:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_szero>
     7cc:	08 95       	ret

000007ce <__fixunssfsi>:
     7ce:	0e 94 83 04 	call	0x906	; 0x906 <__fp_splitA>
     7d2:	88 f0       	brcs	.+34     	; 0x7f6 <__fixunssfsi+0x28>
     7d4:	9f 57       	subi	r25, 0x7F	; 127
     7d6:	98 f0       	brcs	.+38     	; 0x7fe <__fixunssfsi+0x30>
     7d8:	b9 2f       	mov	r27, r25
     7da:	99 27       	eor	r25, r25
     7dc:	b7 51       	subi	r27, 0x17	; 23
     7de:	b0 f0       	brcs	.+44     	; 0x80c <__fixunssfsi+0x3e>
     7e0:	e1 f0       	breq	.+56     	; 0x81a <__fixunssfsi+0x4c>
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	88 1f       	adc	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	1a f0       	brmi	.+6      	; 0x7f2 <__fixunssfsi+0x24>
     7ec:	ba 95       	dec	r27
     7ee:	c9 f7       	brne	.-14     	; 0x7e2 <__fixunssfsi+0x14>
     7f0:	14 c0       	rjmp	.+40     	; 0x81a <__fixunssfsi+0x4c>
     7f2:	b1 30       	cpi	r27, 0x01	; 1
     7f4:	91 f0       	breq	.+36     	; 0x81a <__fixunssfsi+0x4c>
     7f6:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_zero>
     7fa:	b1 e0       	ldi	r27, 0x01	; 1
     7fc:	08 95       	ret
     7fe:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__fp_zero>
     802:	67 2f       	mov	r22, r23
     804:	78 2f       	mov	r23, r24
     806:	88 27       	eor	r24, r24
     808:	b8 5f       	subi	r27, 0xF8	; 248
     80a:	39 f0       	breq	.+14     	; 0x81a <__fixunssfsi+0x4c>
     80c:	b9 3f       	cpi	r27, 0xF9	; 249
     80e:	cc f3       	brlt	.-14     	; 0x802 <__fixunssfsi+0x34>
     810:	86 95       	lsr	r24
     812:	77 95       	ror	r23
     814:	67 95       	ror	r22
     816:	b3 95       	inc	r27
     818:	d9 f7       	brne	.-10     	; 0x810 <__fixunssfsi+0x42>
     81a:	3e f4       	brtc	.+14     	; 0x82a <__fixunssfsi+0x5c>
     81c:	90 95       	com	r25
     81e:	80 95       	com	r24
     820:	70 95       	com	r23
     822:	61 95       	neg	r22
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	8f 4f       	sbci	r24, 0xFF	; 255
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	08 95       	ret

0000082c <__floatunsisf>:
     82c:	e8 94       	clt
     82e:	09 c0       	rjmp	.+18     	; 0x842 <__floatsisf+0x12>

00000830 <__floatsisf>:
     830:	97 fb       	bst	r25, 7
     832:	3e f4       	brtc	.+14     	; 0x842 <__floatsisf+0x12>
     834:	90 95       	com	r25
     836:	80 95       	com	r24
     838:	70 95       	com	r23
     83a:	61 95       	neg	r22
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	8f 4f       	sbci	r24, 0xFF	; 255
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	99 23       	and	r25, r25
     844:	a9 f0       	breq	.+42     	; 0x870 <__floatsisf+0x40>
     846:	f9 2f       	mov	r31, r25
     848:	96 e9       	ldi	r25, 0x96	; 150
     84a:	bb 27       	eor	r27, r27
     84c:	93 95       	inc	r25
     84e:	f6 95       	lsr	r31
     850:	87 95       	ror	r24
     852:	77 95       	ror	r23
     854:	67 95       	ror	r22
     856:	b7 95       	ror	r27
     858:	f1 11       	cpse	r31, r1
     85a:	f8 cf       	rjmp	.-16     	; 0x84c <__floatsisf+0x1c>
     85c:	fa f4       	brpl	.+62     	; 0x89c <__floatsisf+0x6c>
     85e:	bb 0f       	add	r27, r27
     860:	11 f4       	brne	.+4      	; 0x866 <__floatsisf+0x36>
     862:	60 ff       	sbrs	r22, 0
     864:	1b c0       	rjmp	.+54     	; 0x89c <__floatsisf+0x6c>
     866:	6f 5f       	subi	r22, 0xFF	; 255
     868:	7f 4f       	sbci	r23, 0xFF	; 255
     86a:	8f 4f       	sbci	r24, 0xFF	; 255
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	16 c0       	rjmp	.+44     	; 0x89c <__floatsisf+0x6c>
     870:	88 23       	and	r24, r24
     872:	11 f0       	breq	.+4      	; 0x878 <__floatsisf+0x48>
     874:	96 e9       	ldi	r25, 0x96	; 150
     876:	11 c0       	rjmp	.+34     	; 0x89a <__floatsisf+0x6a>
     878:	77 23       	and	r23, r23
     87a:	21 f0       	breq	.+8      	; 0x884 <__floatsisf+0x54>
     87c:	9e e8       	ldi	r25, 0x8E	; 142
     87e:	87 2f       	mov	r24, r23
     880:	76 2f       	mov	r23, r22
     882:	05 c0       	rjmp	.+10     	; 0x88e <__floatsisf+0x5e>
     884:	66 23       	and	r22, r22
     886:	71 f0       	breq	.+28     	; 0x8a4 <__floatsisf+0x74>
     888:	96 e8       	ldi	r25, 0x86	; 134
     88a:	86 2f       	mov	r24, r22
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	2a f0       	brmi	.+10     	; 0x89c <__floatsisf+0x6c>
     892:	9a 95       	dec	r25
     894:	66 0f       	add	r22, r22
     896:	77 1f       	adc	r23, r23
     898:	88 1f       	adc	r24, r24
     89a:	da f7       	brpl	.-10     	; 0x892 <__floatsisf+0x62>
     89c:	88 0f       	add	r24, r24
     89e:	96 95       	lsr	r25
     8a0:	87 95       	ror	r24
     8a2:	97 f9       	bld	r25, 7
     8a4:	08 95       	ret

000008a6 <__fp_inf>:
     8a6:	97 f9       	bld	r25, 7
     8a8:	9f 67       	ori	r25, 0x7F	; 127
     8aa:	80 e8       	ldi	r24, 0x80	; 128
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	08 95       	ret

000008b2 <__fp_nan>:
     8b2:	9f ef       	ldi	r25, 0xFF	; 255
     8b4:	80 ec       	ldi	r24, 0xC0	; 192
     8b6:	08 95       	ret

000008b8 <__fp_pscA>:
     8b8:	00 24       	eor	r0, r0
     8ba:	0a 94       	dec	r0
     8bc:	16 16       	cp	r1, r22
     8be:	17 06       	cpc	r1, r23
     8c0:	18 06       	cpc	r1, r24
     8c2:	09 06       	cpc	r0, r25
     8c4:	08 95       	ret

000008c6 <__fp_pscB>:
     8c6:	00 24       	eor	r0, r0
     8c8:	0a 94       	dec	r0
     8ca:	12 16       	cp	r1, r18
     8cc:	13 06       	cpc	r1, r19
     8ce:	14 06       	cpc	r1, r20
     8d0:	05 06       	cpc	r0, r21
     8d2:	08 95       	ret

000008d4 <__fp_round>:
     8d4:	09 2e       	mov	r0, r25
     8d6:	03 94       	inc	r0
     8d8:	00 0c       	add	r0, r0
     8da:	11 f4       	brne	.+4      	; 0x8e0 <__fp_round+0xc>
     8dc:	88 23       	and	r24, r24
     8de:	52 f0       	brmi	.+20     	; 0x8f4 <__fp_round+0x20>
     8e0:	bb 0f       	add	r27, r27
     8e2:	40 f4       	brcc	.+16     	; 0x8f4 <__fp_round+0x20>
     8e4:	bf 2b       	or	r27, r31
     8e6:	11 f4       	brne	.+4      	; 0x8ec <__fp_round+0x18>
     8e8:	60 ff       	sbrs	r22, 0
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <__fp_round+0x20>
     8ec:	6f 5f       	subi	r22, 0xFF	; 255
     8ee:	7f 4f       	sbci	r23, 0xFF	; 255
     8f0:	8f 4f       	sbci	r24, 0xFF	; 255
     8f2:	9f 4f       	sbci	r25, 0xFF	; 255
     8f4:	08 95       	ret

000008f6 <__fp_split3>:
     8f6:	57 fd       	sbrc	r21, 7
     8f8:	90 58       	subi	r25, 0x80	; 128
     8fa:	44 0f       	add	r20, r20
     8fc:	55 1f       	adc	r21, r21
     8fe:	59 f0       	breq	.+22     	; 0x916 <__fp_splitA+0x10>
     900:	5f 3f       	cpi	r21, 0xFF	; 255
     902:	71 f0       	breq	.+28     	; 0x920 <__fp_splitA+0x1a>
     904:	47 95       	ror	r20

00000906 <__fp_splitA>:
     906:	88 0f       	add	r24, r24
     908:	97 fb       	bst	r25, 7
     90a:	99 1f       	adc	r25, r25
     90c:	61 f0       	breq	.+24     	; 0x926 <__fp_splitA+0x20>
     90e:	9f 3f       	cpi	r25, 0xFF	; 255
     910:	79 f0       	breq	.+30     	; 0x930 <__fp_splitA+0x2a>
     912:	87 95       	ror	r24
     914:	08 95       	ret
     916:	12 16       	cp	r1, r18
     918:	13 06       	cpc	r1, r19
     91a:	14 06       	cpc	r1, r20
     91c:	55 1f       	adc	r21, r21
     91e:	f2 cf       	rjmp	.-28     	; 0x904 <__stack+0x5>
     920:	46 95       	lsr	r20
     922:	f1 df       	rcall	.-30     	; 0x906 <__fp_splitA>
     924:	08 c0       	rjmp	.+16     	; 0x936 <__fp_splitA+0x30>
     926:	16 16       	cp	r1, r22
     928:	17 06       	cpc	r1, r23
     92a:	18 06       	cpc	r1, r24
     92c:	99 1f       	adc	r25, r25
     92e:	f1 cf       	rjmp	.-30     	; 0x912 <__fp_splitA+0xc>
     930:	86 95       	lsr	r24
     932:	71 05       	cpc	r23, r1
     934:	61 05       	cpc	r22, r1
     936:	08 94       	sec
     938:	08 95       	ret

0000093a <__fp_zero>:
     93a:	e8 94       	clt

0000093c <__fp_szero>:
     93c:	bb 27       	eor	r27, r27
     93e:	66 27       	eor	r22, r22
     940:	77 27       	eor	r23, r23
     942:	cb 01       	movw	r24, r22
     944:	97 f9       	bld	r25, 7
     946:	08 95       	ret

00000948 <__mulsf3>:
     948:	0e 94 b7 04 	call	0x96e	; 0x96e <__mulsf3x>
     94c:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <__fp_round>
     950:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__fp_pscA>
     954:	38 f0       	brcs	.+14     	; 0x964 <__mulsf3+0x1c>
     956:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_pscB>
     95a:	20 f0       	brcs	.+8      	; 0x964 <__mulsf3+0x1c>
     95c:	95 23       	and	r25, r21
     95e:	11 f0       	breq	.+4      	; 0x964 <__mulsf3+0x1c>
     960:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_inf>
     964:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <__fp_nan>
     968:	11 24       	eor	r1, r1
     96a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_szero>

0000096e <__mulsf3x>:
     96e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_split3>
     972:	70 f3       	brcs	.-36     	; 0x950 <__mulsf3+0x8>

00000974 <__mulsf3_pse>:
     974:	95 9f       	mul	r25, r21
     976:	c1 f3       	breq	.-16     	; 0x968 <__mulsf3+0x20>
     978:	95 0f       	add	r25, r21
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	55 1f       	adc	r21, r21
     97e:	62 9f       	mul	r22, r18
     980:	f0 01       	movw	r30, r0
     982:	72 9f       	mul	r23, r18
     984:	bb 27       	eor	r27, r27
     986:	f0 0d       	add	r31, r0
     988:	b1 1d       	adc	r27, r1
     98a:	63 9f       	mul	r22, r19
     98c:	aa 27       	eor	r26, r26
     98e:	f0 0d       	add	r31, r0
     990:	b1 1d       	adc	r27, r1
     992:	aa 1f       	adc	r26, r26
     994:	64 9f       	mul	r22, r20
     996:	66 27       	eor	r22, r22
     998:	b0 0d       	add	r27, r0
     99a:	a1 1d       	adc	r26, r1
     99c:	66 1f       	adc	r22, r22
     99e:	82 9f       	mul	r24, r18
     9a0:	22 27       	eor	r18, r18
     9a2:	b0 0d       	add	r27, r0
     9a4:	a1 1d       	adc	r26, r1
     9a6:	62 1f       	adc	r22, r18
     9a8:	73 9f       	mul	r23, r19
     9aa:	b0 0d       	add	r27, r0
     9ac:	a1 1d       	adc	r26, r1
     9ae:	62 1f       	adc	r22, r18
     9b0:	83 9f       	mul	r24, r19
     9b2:	a0 0d       	add	r26, r0
     9b4:	61 1d       	adc	r22, r1
     9b6:	22 1f       	adc	r18, r18
     9b8:	74 9f       	mul	r23, r20
     9ba:	33 27       	eor	r19, r19
     9bc:	a0 0d       	add	r26, r0
     9be:	61 1d       	adc	r22, r1
     9c0:	23 1f       	adc	r18, r19
     9c2:	84 9f       	mul	r24, r20
     9c4:	60 0d       	add	r22, r0
     9c6:	21 1d       	adc	r18, r1
     9c8:	82 2f       	mov	r24, r18
     9ca:	76 2f       	mov	r23, r22
     9cc:	6a 2f       	mov	r22, r26
     9ce:	11 24       	eor	r1, r1
     9d0:	9f 57       	subi	r25, 0x7F	; 127
     9d2:	50 40       	sbci	r21, 0x00	; 0
     9d4:	9a f0       	brmi	.+38     	; 0x9fc <__mulsf3_pse+0x88>
     9d6:	f1 f0       	breq	.+60     	; 0xa14 <__mulsf3_pse+0xa0>
     9d8:	88 23       	and	r24, r24
     9da:	4a f0       	brmi	.+18     	; 0x9ee <__mulsf3_pse+0x7a>
     9dc:	ee 0f       	add	r30, r30
     9de:	ff 1f       	adc	r31, r31
     9e0:	bb 1f       	adc	r27, r27
     9e2:	66 1f       	adc	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	88 1f       	adc	r24, r24
     9e8:	91 50       	subi	r25, 0x01	; 1
     9ea:	50 40       	sbci	r21, 0x00	; 0
     9ec:	a9 f7       	brne	.-22     	; 0x9d8 <__mulsf3_pse+0x64>
     9ee:	9e 3f       	cpi	r25, 0xFE	; 254
     9f0:	51 05       	cpc	r21, r1
     9f2:	80 f0       	brcs	.+32     	; 0xa14 <__mulsf3_pse+0xa0>
     9f4:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_inf>
     9f8:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_szero>
     9fc:	5f 3f       	cpi	r21, 0xFF	; 255
     9fe:	e4 f3       	brlt	.-8      	; 0x9f8 <__mulsf3_pse+0x84>
     a00:	98 3e       	cpi	r25, 0xE8	; 232
     a02:	d4 f3       	brlt	.-12     	; 0x9f8 <__mulsf3_pse+0x84>
     a04:	86 95       	lsr	r24
     a06:	77 95       	ror	r23
     a08:	67 95       	ror	r22
     a0a:	b7 95       	ror	r27
     a0c:	f7 95       	ror	r31
     a0e:	e7 95       	ror	r30
     a10:	9f 5f       	subi	r25, 0xFF	; 255
     a12:	c1 f7       	brne	.-16     	; 0xa04 <__mulsf3_pse+0x90>
     a14:	fe 2b       	or	r31, r30
     a16:	88 0f       	add	r24, r24
     a18:	91 1d       	adc	r25, r1
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	97 f9       	bld	r25, 7
     a20:	08 95       	ret

00000a22 <vfprintf>:
     a22:	ab e0       	ldi	r26, 0x0B	; 11
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	e7 e1       	ldi	r30, 0x17	; 23
     a28:	f5 e0       	ldi	r31, 0x05	; 5
     a2a:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__prologue_saves__+0x8>
     a2e:	6c 01       	movw	r12, r24
     a30:	7b 01       	movw	r14, r22
     a32:	3a 01       	movw	r6, r20
     a34:	fc 01       	movw	r30, r24
     a36:	17 82       	std	Z+7, r1	; 0x07
     a38:	16 82       	std	Z+6, r1	; 0x06
     a3a:	83 81       	ldd	r24, Z+3	; 0x03
     a3c:	81 ff       	sbrs	r24, 1
     a3e:	03 c1       	rjmp	.+518    	; 0xc46 <vfprintf+0x224>
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	4c 01       	movw	r8, r24
     a46:	f6 01       	movw	r30, r12
     a48:	b3 80       	ldd	r11, Z+3	; 0x03
     a4a:	f7 01       	movw	r30, r14
     a4c:	b3 fc       	sbrc	r11, 3
     a4e:	05 91       	lpm	r16, Z+
     a50:	b3 fe       	sbrs	r11, 3
     a52:	01 91       	ld	r16, Z+
     a54:	7f 01       	movw	r14, r30
     a56:	00 23       	and	r16, r16
     a58:	09 f4       	brne	.+2      	; 0xa5c <vfprintf+0x3a>
     a5a:	f1 c0       	rjmp	.+482    	; 0xc3e <vfprintf+0x21c>
     a5c:	05 32       	cpi	r16, 0x25	; 37
     a5e:	49 f4       	brne	.+18     	; 0xa72 <vfprintf+0x50>
     a60:	b3 fc       	sbrc	r11, 3
     a62:	05 91       	lpm	r16, Z+
     a64:	b3 fe       	sbrs	r11, 3
     a66:	01 91       	ld	r16, Z+
     a68:	7f 01       	movw	r14, r30
     a6a:	05 32       	cpi	r16, 0x25	; 37
     a6c:	11 f0       	breq	.+4      	; 0xa72 <vfprintf+0x50>
     a6e:	10 e0       	ldi	r17, 0x00	; 0
     a70:	19 c0       	rjmp	.+50     	; 0xaa4 <vfprintf+0x82>
     a72:	b6 01       	movw	r22, r12
     a74:	80 2f       	mov	r24, r16
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     a7c:	53 01       	movw	r10, r6
     a7e:	35 01       	movw	r6, r10
     a80:	e2 cf       	rjmp	.-60     	; 0xa46 <vfprintf+0x24>
     a82:	00 23       	and	r16, r16
     a84:	09 f4       	brne	.+2      	; 0xa88 <vfprintf+0x66>
     a86:	db c0       	rjmp	.+438    	; 0xc3e <vfprintf+0x21c>
     a88:	60 2f       	mov	r22, r16
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	8f e6       	ldi	r24, 0x6F	; 111
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 aa 06 	call	0xd54	; 0xd54 <strchr_P>
     a94:	89 2b       	or	r24, r25
     a96:	49 f0       	breq	.+18     	; 0xaaa <vfprintf+0x88>
     a98:	f7 01       	movw	r30, r14
     a9a:	b3 fc       	sbrc	r11, 3
     a9c:	05 91       	lpm	r16, Z+
     a9e:	b3 fe       	sbrs	r11, 3
     aa0:	01 91       	ld	r16, Z+
     aa2:	7f 01       	movw	r14, r30
     aa4:	17 ff       	sbrs	r17, 7
     aa6:	ed cf       	rjmp	.-38     	; 0xa82 <vfprintf+0x60>
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <vfprintf+0x90>
     aaa:	03 32       	cpi	r16, 0x23	; 35
     aac:	39 f0       	breq	.+14     	; 0xabc <vfprintf+0x9a>
     aae:	0c 36       	cpi	r16, 0x6C	; 108
     ab0:	19 f0       	breq	.+6      	; 0xab8 <vfprintf+0x96>
     ab2:	01 11       	cpse	r16, r1
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <vfprintf+0x9e>
     ab6:	c3 c0       	rjmp	.+390    	; 0xc3e <vfprintf+0x21c>
     ab8:	10 68       	ori	r17, 0x80	; 128
     aba:	ee cf       	rjmp	.-36     	; 0xa98 <vfprintf+0x76>
     abc:	10 e1       	ldi	r17, 0x10	; 16
     abe:	ec cf       	rjmp	.-40     	; 0xa98 <vfprintf+0x76>
     ac0:	60 2f       	mov	r22, r16
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	88 e6       	ldi	r24, 0x68	; 104
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 aa 06 	call	0xd54	; 0xd54 <strchr_P>
     acc:	89 2b       	or	r24, r25
     ace:	41 f0       	breq	.+16     	; 0xae0 <vfprintf+0xbe>
     ad0:	53 01       	movw	r10, r6
     ad2:	f4 e0       	ldi	r31, 0x04	; 4
     ad4:	af 0e       	add	r10, r31
     ad6:	b1 1c       	adc	r11, r1
     ad8:	b6 01       	movw	r22, r12
     ada:	8f e3       	ldi	r24, 0x3F	; 63
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	10 c0       	rjmp	.+32     	; 0xb00 <vfprintf+0xde>
     ae0:	03 36       	cpi	r16, 0x63	; 99
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <vfprintf+0xce>
     ae4:	03 37       	cpi	r16, 0x73	; 115
     ae6:	79 f0       	breq	.+30     	; 0xb06 <vfprintf+0xe4>
     ae8:	03 35       	cpi	r16, 0x53	; 83
     aea:	11 f5       	brne	.+68     	; 0xb30 <vfprintf+0x10e>
     aec:	11 60       	ori	r17, 0x01	; 1
     aee:	0b c0       	rjmp	.+22     	; 0xb06 <vfprintf+0xe4>
     af0:	53 01       	movw	r10, r6
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	a8 0e       	add	r10, r24
     af6:	b1 1c       	adc	r11, r1
     af8:	b6 01       	movw	r22, r12
     afa:	f3 01       	movw	r30, r6
     afc:	80 81       	ld	r24, Z
     afe:	91 81       	ldd	r25, Z+1	; 0x01
     b00:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     b04:	bc cf       	rjmp	.-136    	; 0xa7e <vfprintf+0x5c>
     b06:	53 01       	movw	r10, r6
     b08:	f2 e0       	ldi	r31, 0x02	; 2
     b0a:	af 0e       	add	r10, r31
     b0c:	b1 1c       	adc	r11, r1
     b0e:	f3 01       	movw	r30, r6
     b10:	60 80       	ld	r6, Z
     b12:	71 80       	ldd	r7, Z+1	; 0x01
     b14:	f3 01       	movw	r30, r6
     b16:	10 fd       	sbrc	r17, 0
     b18:	85 91       	lpm	r24, Z+
     b1a:	10 ff       	sbrs	r17, 0
     b1c:	81 91       	ld	r24, Z+
     b1e:	3f 01       	movw	r6, r30
     b20:	88 23       	and	r24, r24
     b22:	09 f4       	brne	.+2      	; 0xb26 <vfprintf+0x104>
     b24:	ac cf       	rjmp	.-168    	; 0xa7e <vfprintf+0x5c>
     b26:	b6 01       	movw	r22, r12
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     b2e:	f2 cf       	rjmp	.-28     	; 0xb14 <vfprintf+0xf2>
     b30:	04 36       	cpi	r16, 0x64	; 100
     b32:	11 f0       	breq	.+4      	; 0xb38 <vfprintf+0x116>
     b34:	09 36       	cpi	r16, 0x69	; 105
     b36:	21 f5       	brne	.+72     	; 0xb80 <vfprintf+0x15e>
     b38:	53 01       	movw	r10, r6
     b3a:	17 ff       	sbrs	r17, 7
     b3c:	09 c0       	rjmp	.+18     	; 0xb50 <vfprintf+0x12e>
     b3e:	f4 e0       	ldi	r31, 0x04	; 4
     b40:	af 0e       	add	r10, r31
     b42:	b1 1c       	adc	r11, r1
     b44:	f3 01       	movw	r30, r6
     b46:	60 81       	ld	r22, Z
     b48:	71 81       	ldd	r23, Z+1	; 0x01
     b4a:	82 81       	ldd	r24, Z+2	; 0x02
     b4c:	93 81       	ldd	r25, Z+3	; 0x03
     b4e:	0a c0       	rjmp	.+20     	; 0xb64 <vfprintf+0x142>
     b50:	f2 e0       	ldi	r31, 0x02	; 2
     b52:	af 0e       	add	r10, r31
     b54:	b1 1c       	adc	r11, r1
     b56:	f3 01       	movw	r30, r6
     b58:	60 81       	ld	r22, Z
     b5a:	71 81       	ldd	r23, Z+1	; 0x01
     b5c:	07 2e       	mov	r0, r23
     b5e:	00 0c       	add	r0, r0
     b60:	88 0b       	sbc	r24, r24
     b62:	99 0b       	sbc	r25, r25
     b64:	1f 7e       	andi	r17, 0xEF	; 239
     b66:	97 ff       	sbrs	r25, 7
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <vfprintf+0x158>
     b6a:	90 95       	com	r25
     b6c:	80 95       	com	r24
     b6e:	70 95       	com	r23
     b70:	61 95       	neg	r22
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	8f 4f       	sbci	r24, 0xFF	; 255
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	10 64       	ori	r17, 0x40	; 64
     b7a:	2a e0       	ldi	r18, 0x0A	; 10
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	30 c0       	rjmp	.+96     	; 0xbe0 <vfprintf+0x1be>
     b80:	00 37       	cpi	r16, 0x70	; 112
     b82:	91 f0       	breq	.+36     	; 0xba8 <vfprintf+0x186>
     b84:	40 f4       	brcc	.+16     	; 0xb96 <vfprintf+0x174>
     b86:	08 35       	cpi	r16, 0x58	; 88
     b88:	a1 f0       	breq	.+40     	; 0xbb2 <vfprintf+0x190>
     b8a:	0f 36       	cpi	r16, 0x6F	; 111
     b8c:	09 f0       	breq	.+2      	; 0xb90 <vfprintf+0x16e>
     b8e:	57 c0       	rjmp	.+174    	; 0xc3e <vfprintf+0x21c>
     b90:	28 e0       	ldi	r18, 0x08	; 8
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	11 c0       	rjmp	.+34     	; 0xbb8 <vfprintf+0x196>
     b96:	05 37       	cpi	r16, 0x75	; 117
     b98:	19 f0       	breq	.+6      	; 0xba0 <vfprintf+0x17e>
     b9a:	08 37       	cpi	r16, 0x78	; 120
     b9c:	31 f0       	breq	.+12     	; 0xbaa <vfprintf+0x188>
     b9e:	4f c0       	rjmp	.+158    	; 0xc3e <vfprintf+0x21c>
     ba0:	1f 7e       	andi	r17, 0xEF	; 239
     ba2:	2a e0       	ldi	r18, 0x0A	; 10
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <vfprintf+0x196>
     ba8:	10 61       	ori	r17, 0x10	; 16
     baa:	14 62       	ori	r17, 0x24	; 36
     bac:	20 e1       	ldi	r18, 0x10	; 16
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <vfprintf+0x196>
     bb2:	14 60       	ori	r17, 0x04	; 4
     bb4:	20 e1       	ldi	r18, 0x10	; 16
     bb6:	32 e0       	ldi	r19, 0x02	; 2
     bb8:	53 01       	movw	r10, r6
     bba:	17 ff       	sbrs	r17, 7
     bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <vfprintf+0x1ae>
     bbe:	f4 e0       	ldi	r31, 0x04	; 4
     bc0:	af 0e       	add	r10, r31
     bc2:	b1 1c       	adc	r11, r1
     bc4:	f3 01       	movw	r30, r6
     bc6:	60 81       	ld	r22, Z
     bc8:	71 81       	ldd	r23, Z+1	; 0x01
     bca:	82 81       	ldd	r24, Z+2	; 0x02
     bcc:	93 81       	ldd	r25, Z+3	; 0x03
     bce:	08 c0       	rjmp	.+16     	; 0xbe0 <vfprintf+0x1be>
     bd0:	f2 e0       	ldi	r31, 0x02	; 2
     bd2:	af 0e       	add	r10, r31
     bd4:	b1 1c       	adc	r11, r1
     bd6:	f3 01       	movw	r30, r6
     bd8:	60 81       	ld	r22, Z
     bda:	71 81       	ldd	r23, Z+1	; 0x01
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	a4 01       	movw	r20, r8
     be2:	0e 94 52 07 	call	0xea4	; 0xea4 <__ultoa_invert>
     be6:	08 2f       	mov	r16, r24
     be8:	08 19       	sub	r16, r8
     bea:	16 ff       	sbrs	r17, 6
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <vfprintf+0x1d6>
     bee:	b6 01       	movw	r22, r12
     bf0:	8d e2       	ldi	r24, 0x2D	; 45
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     bf8:	14 ff       	sbrs	r17, 4
     bfa:	15 c0       	rjmp	.+42     	; 0xc26 <vfprintf+0x204>
     bfc:	fe 01       	movw	r30, r28
     bfe:	e0 0f       	add	r30, r16
     c00:	f1 1d       	adc	r31, r1
     c02:	80 81       	ld	r24, Z
     c04:	80 33       	cpi	r24, 0x30	; 48
     c06:	79 f0       	breq	.+30     	; 0xc26 <vfprintf+0x204>
     c08:	b6 01       	movw	r22, r12
     c0a:	80 e3       	ldi	r24, 0x30	; 48
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     c12:	12 ff       	sbrs	r17, 2
     c14:	08 c0       	rjmp	.+16     	; 0xc26 <vfprintf+0x204>
     c16:	10 72       	andi	r17, 0x20	; 32
     c18:	81 2f       	mov	r24, r17
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	b6 01       	movw	r22, r12
     c1e:	88 5a       	subi	r24, 0xA8	; 168
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     c26:	01 50       	subi	r16, 0x01	; 1
     c28:	f4 01       	movw	r30, r8
     c2a:	e0 0f       	add	r30, r16
     c2c:	f1 1d       	adc	r31, r1
     c2e:	80 81       	ld	r24, Z
     c30:	b6 01       	movw	r22, r12
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 00 07 	call	0xe00	; 0xe00 <fputc>
     c38:	01 11       	cpse	r16, r1
     c3a:	f5 cf       	rjmp	.-22     	; 0xc26 <vfprintf+0x204>
     c3c:	20 cf       	rjmp	.-448    	; 0xa7e <vfprintf+0x5c>
     c3e:	f6 01       	movw	r30, r12
     c40:	86 81       	ldd	r24, Z+6	; 0x06
     c42:	97 81       	ldd	r25, Z+7	; 0x07
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x228>
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	2b 96       	adiw	r28, 0x0b	; 11
     c4c:	ee e0       	ldi	r30, 0x0E	; 14
     c4e:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__epilogue_restores__+0x8>

00000c52 <__divmodhi4>:
     c52:	97 fb       	bst	r25, 7
     c54:	07 2e       	mov	r0, r23
     c56:	16 f4       	brtc	.+4      	; 0xc5c <__divmodhi4+0xa>
     c58:	00 94       	com	r0
     c5a:	07 d0       	rcall	.+14     	; 0xc6a <__divmodhi4_neg1>
     c5c:	77 fd       	sbrc	r23, 7
     c5e:	09 d0       	rcall	.+18     	; 0xc72 <__divmodhi4_neg2>
     c60:	0e 94 96 06 	call	0xd2c	; 0xd2c <__udivmodhi4>
     c64:	07 fc       	sbrc	r0, 7
     c66:	05 d0       	rcall	.+10     	; 0xc72 <__divmodhi4_neg2>
     c68:	3e f4       	brtc	.+14     	; 0xc78 <__divmodhi4_exit>

00000c6a <__divmodhi4_neg1>:
     c6a:	90 95       	com	r25
     c6c:	81 95       	neg	r24
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	08 95       	ret

00000c72 <__divmodhi4_neg2>:
     c72:	70 95       	com	r23
     c74:	61 95       	neg	r22
     c76:	7f 4f       	sbci	r23, 0xFF	; 255

00000c78 <__divmodhi4_exit>:
     c78:	08 95       	ret

00000c7a <__udivmodsi4>:
     c7a:	a1 e2       	ldi	r26, 0x21	; 33
     c7c:	1a 2e       	mov	r1, r26
     c7e:	aa 1b       	sub	r26, r26
     c80:	bb 1b       	sub	r27, r27
     c82:	fd 01       	movw	r30, r26
     c84:	0d c0       	rjmp	.+26     	; 0xca0 <__udivmodsi4_ep>

00000c86 <__udivmodsi4_loop>:
     c86:	aa 1f       	adc	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	ee 1f       	adc	r30, r30
     c8c:	ff 1f       	adc	r31, r31
     c8e:	a2 17       	cp	r26, r18
     c90:	b3 07       	cpc	r27, r19
     c92:	e4 07       	cpc	r30, r20
     c94:	f5 07       	cpc	r31, r21
     c96:	20 f0       	brcs	.+8      	; 0xca0 <__udivmodsi4_ep>
     c98:	a2 1b       	sub	r26, r18
     c9a:	b3 0b       	sbc	r27, r19
     c9c:	e4 0b       	sbc	r30, r20
     c9e:	f5 0b       	sbc	r31, r21

00000ca0 <__udivmodsi4_ep>:
     ca0:	66 1f       	adc	r22, r22
     ca2:	77 1f       	adc	r23, r23
     ca4:	88 1f       	adc	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	1a 94       	dec	r1
     caa:	69 f7       	brne	.-38     	; 0xc86 <__udivmodsi4_loop>
     cac:	60 95       	com	r22
     cae:	70 95       	com	r23
     cb0:	80 95       	com	r24
     cb2:	90 95       	com	r25
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	bd 01       	movw	r22, r26
     cba:	cf 01       	movw	r24, r30
     cbc:	08 95       	ret

00000cbe <__prologue_saves__>:
     cbe:	2f 92       	push	r2
     cc0:	3f 92       	push	r3
     cc2:	4f 92       	push	r4
     cc4:	5f 92       	push	r5
     cc6:	6f 92       	push	r6
     cc8:	7f 92       	push	r7
     cca:	8f 92       	push	r8
     ccc:	9f 92       	push	r9
     cce:	af 92       	push	r10
     cd0:	bf 92       	push	r11
     cd2:	cf 92       	push	r12
     cd4:	df 92       	push	r13
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	ca 1b       	sub	r28, r26
     ce8:	db 0b       	sbc	r29, r27
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	09 94       	ijmp

00000cf6 <__epilogue_restores__>:
     cf6:	2a 88       	ldd	r2, Y+18	; 0x12
     cf8:	39 88       	ldd	r3, Y+17	; 0x11
     cfa:	48 88       	ldd	r4, Y+16	; 0x10
     cfc:	5f 84       	ldd	r5, Y+15	; 0x0f
     cfe:	6e 84       	ldd	r6, Y+14	; 0x0e
     d00:	7d 84       	ldd	r7, Y+13	; 0x0d
     d02:	8c 84       	ldd	r8, Y+12	; 0x0c
     d04:	9b 84       	ldd	r9, Y+11	; 0x0b
     d06:	aa 84       	ldd	r10, Y+10	; 0x0a
     d08:	b9 84       	ldd	r11, Y+9	; 0x09
     d0a:	c8 84       	ldd	r12, Y+8	; 0x08
     d0c:	df 80       	ldd	r13, Y+7	; 0x07
     d0e:	ee 80       	ldd	r14, Y+6	; 0x06
     d10:	fd 80       	ldd	r15, Y+5	; 0x05
     d12:	0c 81       	ldd	r16, Y+4	; 0x04
     d14:	1b 81       	ldd	r17, Y+3	; 0x03
     d16:	aa 81       	ldd	r26, Y+2	; 0x02
     d18:	b9 81       	ldd	r27, Y+1	; 0x01
     d1a:	ce 0f       	add	r28, r30
     d1c:	d1 1d       	adc	r29, r1
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	ed 01       	movw	r28, r26
     d2a:	08 95       	ret

00000d2c <__udivmodhi4>:
     d2c:	aa 1b       	sub	r26, r26
     d2e:	bb 1b       	sub	r27, r27
     d30:	51 e1       	ldi	r21, 0x11	; 17
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <__udivmodhi4_ep>

00000d34 <__udivmodhi4_loop>:
     d34:	aa 1f       	adc	r26, r26
     d36:	bb 1f       	adc	r27, r27
     d38:	a6 17       	cp	r26, r22
     d3a:	b7 07       	cpc	r27, r23
     d3c:	10 f0       	brcs	.+4      	; 0xd42 <__udivmodhi4_ep>
     d3e:	a6 1b       	sub	r26, r22
     d40:	b7 0b       	sbc	r27, r23

00000d42 <__udivmodhi4_ep>:
     d42:	88 1f       	adc	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	5a 95       	dec	r21
     d48:	a9 f7       	brne	.-22     	; 0xd34 <__udivmodhi4_loop>
     d4a:	80 95       	com	r24
     d4c:	90 95       	com	r25
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	08 95       	ret

00000d54 <strchr_P>:
     d54:	fc 01       	movw	r30, r24
     d56:	05 90       	lpm	r0, Z+
     d58:	06 16       	cp	r0, r22
     d5a:	21 f0       	breq	.+8      	; 0xd64 <strchr_P+0x10>
     d5c:	00 20       	and	r0, r0
     d5e:	d9 f7       	brne	.-10     	; 0xd56 <strchr_P+0x2>
     d60:	c0 01       	movw	r24, r0
     d62:	08 95       	ret
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	cf 01       	movw	r24, r30
     d68:	08 95       	ret

00000d6a <fdevopen>:
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	31 f4       	brne	.+12     	; 0xd82 <fdevopen+0x18>
     d76:	61 15       	cp	r22, r1
     d78:	71 05       	cpc	r23, r1
     d7a:	19 f4       	brne	.+6      	; 0xd82 <fdevopen+0x18>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	3a c0       	rjmp	.+116    	; 0xdf6 <fdevopen+0x8c>
     d82:	8b 01       	movw	r16, r22
     d84:	ec 01       	movw	r28, r24
     d86:	6e e0       	ldi	r22, 0x0E	; 14
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 b0 07 	call	0xf60	; 0xf60 <calloc>
     d92:	fc 01       	movw	r30, r24
     d94:	89 2b       	or	r24, r25
     d96:	91 f3       	breq	.-28     	; 0xd7c <fdevopen+0x12>
     d98:	80 e8       	ldi	r24, 0x80	; 128
     d9a:	83 83       	std	Z+3, r24	; 0x03
     d9c:	01 15       	cp	r16, r1
     d9e:	11 05       	cpc	r17, r1
     da0:	71 f0       	breq	.+28     	; 0xdbe <fdevopen+0x54>
     da2:	13 87       	std	Z+11, r17	; 0x0b
     da4:	02 87       	std	Z+10, r16	; 0x0a
     da6:	81 e8       	ldi	r24, 0x81	; 129
     da8:	83 83       	std	Z+3, r24	; 0x03
     daa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <__iob>
     dae:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <__iob+0x1>
     db2:	89 2b       	or	r24, r25
     db4:	21 f4       	brne	.+8      	; 0xdbe <fdevopen+0x54>
     db6:	f0 93 79 01 	sts	0x0179, r31	; 0x800179 <__iob+0x1>
     dba:	e0 93 78 01 	sts	0x0178, r30	; 0x800178 <__iob>
     dbe:	20 97       	sbiw	r28, 0x00	; 0
     dc0:	c9 f0       	breq	.+50     	; 0xdf4 <fdevopen+0x8a>
     dc2:	d1 87       	std	Z+9, r29	; 0x09
     dc4:	c0 87       	std	Z+8, r28	; 0x08
     dc6:	83 81       	ldd	r24, Z+3	; 0x03
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	83 83       	std	Z+3, r24	; 0x03
     dcc:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__iob+0x2>
     dd0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__iob+0x3>
     dd4:	89 2b       	or	r24, r25
     dd6:	71 f4       	brne	.+28     	; 0xdf4 <fdevopen+0x8a>
     dd8:	f0 93 7b 01 	sts	0x017B, r31	; 0x80017b <__iob+0x3>
     ddc:	e0 93 7a 01 	sts	0x017A, r30	; 0x80017a <__iob+0x2>
     de0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <__iob+0x4>
     de4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <__iob+0x5>
     de8:	89 2b       	or	r24, r25
     dea:	21 f4       	brne	.+8      	; 0xdf4 <fdevopen+0x8a>
     dec:	f0 93 7d 01 	sts	0x017D, r31	; 0x80017d <__iob+0x5>
     df0:	e0 93 7c 01 	sts	0x017C, r30	; 0x80017c <__iob+0x4>
     df4:	cf 01       	movw	r24, r30
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	08 95       	ret

00000e00 <fputc>:
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	fb 01       	movw	r30, r22
     e0a:	23 81       	ldd	r18, Z+3	; 0x03
     e0c:	21 fd       	sbrc	r18, 1
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <fputc+0x16>
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	9f ef       	ldi	r25, 0xFF	; 255
     e14:	2c c0       	rjmp	.+88     	; 0xe6e <fputc+0x6e>
     e16:	22 ff       	sbrs	r18, 2
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <fputc+0x46>
     e1a:	46 81       	ldd	r20, Z+6	; 0x06
     e1c:	57 81       	ldd	r21, Z+7	; 0x07
     e1e:	24 81       	ldd	r18, Z+4	; 0x04
     e20:	35 81       	ldd	r19, Z+5	; 0x05
     e22:	42 17       	cp	r20, r18
     e24:	53 07       	cpc	r21, r19
     e26:	44 f4       	brge	.+16     	; 0xe38 <fputc+0x38>
     e28:	a0 81       	ld	r26, Z
     e2a:	b1 81       	ldd	r27, Z+1	; 0x01
     e2c:	9d 01       	movw	r18, r26
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	31 83       	std	Z+1, r19	; 0x01
     e34:	20 83       	st	Z, r18
     e36:	8c 93       	st	X, r24
     e38:	26 81       	ldd	r18, Z+6	; 0x06
     e3a:	37 81       	ldd	r19, Z+7	; 0x07
     e3c:	2f 5f       	subi	r18, 0xFF	; 255
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	37 83       	std	Z+7, r19	; 0x07
     e42:	26 83       	std	Z+6, r18	; 0x06
     e44:	14 c0       	rjmp	.+40     	; 0xe6e <fputc+0x6e>
     e46:	8b 01       	movw	r16, r22
     e48:	ec 01       	movw	r28, r24
     e4a:	fb 01       	movw	r30, r22
     e4c:	00 84       	ldd	r0, Z+8	; 0x08
     e4e:	f1 85       	ldd	r31, Z+9	; 0x09
     e50:	e0 2d       	mov	r30, r0
     e52:	09 95       	icall
     e54:	89 2b       	or	r24, r25
     e56:	e1 f6       	brne	.-72     	; 0xe10 <fputc+0x10>
     e58:	d8 01       	movw	r26, r16
     e5a:	16 96       	adiw	r26, 0x06	; 6
     e5c:	8d 91       	ld	r24, X+
     e5e:	9c 91       	ld	r25, X
     e60:	17 97       	sbiw	r26, 0x07	; 7
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	17 96       	adiw	r26, 0x07	; 7
     e66:	9c 93       	st	X, r25
     e68:	8e 93       	st	-X, r24
     e6a:	16 97       	sbiw	r26, 0x06	; 6
     e6c:	ce 01       	movw	r24, r28
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	08 95       	ret

00000e78 <printf>:
     e78:	a0 e0       	ldi	r26, 0x00	; 0
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e2 e4       	ldi	r30, 0x42	; 66
     e7e:	f7 e0       	ldi	r31, 0x07	; 7
     e80:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__prologue_saves__+0x20>
     e84:	ae 01       	movw	r20, r28
     e86:	4b 5f       	subi	r20, 0xFB	; 251
     e88:	5f 4f       	sbci	r21, 0xFF	; 255
     e8a:	fa 01       	movw	r30, r20
     e8c:	61 91       	ld	r22, Z+
     e8e:	71 91       	ld	r23, Z+
     e90:	af 01       	movw	r20, r30
     e92:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <__iob+0x2>
     e96:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <__iob+0x3>
     e9a:	0e 94 11 05 	call	0xa22	; 0xa22 <vfprintf>
     e9e:	e2 e0       	ldi	r30, 0x02	; 2
     ea0:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__epilogue_restores__+0x20>

00000ea4 <__ultoa_invert>:
     ea4:	fa 01       	movw	r30, r20
     ea6:	aa 27       	eor	r26, r26
     ea8:	28 30       	cpi	r18, 0x08	; 8
     eaa:	51 f1       	breq	.+84     	; 0xf00 <__ultoa_invert+0x5c>
     eac:	20 31       	cpi	r18, 0x10	; 16
     eae:	81 f1       	breq	.+96     	; 0xf10 <__ultoa_invert+0x6c>
     eb0:	e8 94       	clt
     eb2:	6f 93       	push	r22
     eb4:	6e 7f       	andi	r22, 0xFE	; 254
     eb6:	6e 5f       	subi	r22, 0xFE	; 254
     eb8:	7f 4f       	sbci	r23, 0xFF	; 255
     eba:	8f 4f       	sbci	r24, 0xFF	; 255
     ebc:	9f 4f       	sbci	r25, 0xFF	; 255
     ebe:	af 4f       	sbci	r26, 0xFF	; 255
     ec0:	b1 e0       	ldi	r27, 0x01	; 1
     ec2:	3e d0       	rcall	.+124    	; 0xf40 <__ultoa_invert+0x9c>
     ec4:	b4 e0       	ldi	r27, 0x04	; 4
     ec6:	3c d0       	rcall	.+120    	; 0xf40 <__ultoa_invert+0x9c>
     ec8:	67 0f       	add	r22, r23
     eca:	78 1f       	adc	r23, r24
     ecc:	89 1f       	adc	r24, r25
     ece:	9a 1f       	adc	r25, r26
     ed0:	a1 1d       	adc	r26, r1
     ed2:	68 0f       	add	r22, r24
     ed4:	79 1f       	adc	r23, r25
     ed6:	8a 1f       	adc	r24, r26
     ed8:	91 1d       	adc	r25, r1
     eda:	a1 1d       	adc	r26, r1
     edc:	6a 0f       	add	r22, r26
     ede:	71 1d       	adc	r23, r1
     ee0:	81 1d       	adc	r24, r1
     ee2:	91 1d       	adc	r25, r1
     ee4:	a1 1d       	adc	r26, r1
     ee6:	20 d0       	rcall	.+64     	; 0xf28 <__ultoa_invert+0x84>
     ee8:	09 f4       	brne	.+2      	; 0xeec <__ultoa_invert+0x48>
     eea:	68 94       	set
     eec:	3f 91       	pop	r19
     eee:	2a e0       	ldi	r18, 0x0A	; 10
     ef0:	26 9f       	mul	r18, r22
     ef2:	11 24       	eor	r1, r1
     ef4:	30 19       	sub	r19, r0
     ef6:	30 5d       	subi	r19, 0xD0	; 208
     ef8:	31 93       	st	Z+, r19
     efa:	de f6       	brtc	.-74     	; 0xeb2 <__ultoa_invert+0xe>
     efc:	cf 01       	movw	r24, r30
     efe:	08 95       	ret
     f00:	46 2f       	mov	r20, r22
     f02:	47 70       	andi	r20, 0x07	; 7
     f04:	40 5d       	subi	r20, 0xD0	; 208
     f06:	41 93       	st	Z+, r20
     f08:	b3 e0       	ldi	r27, 0x03	; 3
     f0a:	0f d0       	rcall	.+30     	; 0xf2a <__ultoa_invert+0x86>
     f0c:	c9 f7       	brne	.-14     	; 0xf00 <__ultoa_invert+0x5c>
     f0e:	f6 cf       	rjmp	.-20     	; 0xefc <__ultoa_invert+0x58>
     f10:	46 2f       	mov	r20, r22
     f12:	4f 70       	andi	r20, 0x0F	; 15
     f14:	40 5d       	subi	r20, 0xD0	; 208
     f16:	4a 33       	cpi	r20, 0x3A	; 58
     f18:	18 f0       	brcs	.+6      	; 0xf20 <__ultoa_invert+0x7c>
     f1a:	49 5d       	subi	r20, 0xD9	; 217
     f1c:	31 fd       	sbrc	r19, 1
     f1e:	40 52       	subi	r20, 0x20	; 32
     f20:	41 93       	st	Z+, r20
     f22:	02 d0       	rcall	.+4      	; 0xf28 <__ultoa_invert+0x84>
     f24:	a9 f7       	brne	.-22     	; 0xf10 <__ultoa_invert+0x6c>
     f26:	ea cf       	rjmp	.-44     	; 0xefc <__ultoa_invert+0x58>
     f28:	b4 e0       	ldi	r27, 0x04	; 4
     f2a:	a6 95       	lsr	r26
     f2c:	97 95       	ror	r25
     f2e:	87 95       	ror	r24
     f30:	77 95       	ror	r23
     f32:	67 95       	ror	r22
     f34:	ba 95       	dec	r27
     f36:	c9 f7       	brne	.-14     	; 0xf2a <__ultoa_invert+0x86>
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	61 05       	cpc	r22, r1
     f3c:	71 05       	cpc	r23, r1
     f3e:	08 95       	ret
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
     f44:	0a 2e       	mov	r0, r26
     f46:	06 94       	lsr	r0
     f48:	57 95       	ror	r21
     f4a:	47 95       	ror	r20
     f4c:	37 95       	ror	r19
     f4e:	27 95       	ror	r18
     f50:	ba 95       	dec	r27
     f52:	c9 f7       	brne	.-14     	; 0xf46 <__ultoa_invert+0xa2>
     f54:	62 0f       	add	r22, r18
     f56:	73 1f       	adc	r23, r19
     f58:	84 1f       	adc	r24, r20
     f5a:	95 1f       	adc	r25, r21
     f5c:	a0 1d       	adc	r26, r0
     f5e:	08 95       	ret

00000f60 <calloc>:
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	86 9f       	mul	r24, r22
     f6a:	80 01       	movw	r16, r0
     f6c:	87 9f       	mul	r24, r23
     f6e:	10 0d       	add	r17, r0
     f70:	96 9f       	mul	r25, r22
     f72:	10 0d       	add	r17, r0
     f74:	11 24       	eor	r1, r1
     f76:	c8 01       	movw	r24, r16
     f78:	0e 94 cc 07 	call	0xf98	; 0xf98 <malloc>
     f7c:	ec 01       	movw	r28, r24
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	29 f0       	breq	.+10     	; 0xf8c <calloc+0x2c>
     f82:	a8 01       	movw	r20, r16
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	0e 94 ed 08 	call	0x11da	; 0x11da <memset>
     f8c:	ce 01       	movw	r24, r28
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	08 95       	ret

00000f98 <malloc>:
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	91 05       	cpc	r25, r1
     fa4:	10 f4       	brcc	.+4      	; 0xfaa <malloc+0x12>
     fa6:	82 e0       	ldi	r24, 0x02	; 2
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <__flp>
     fae:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <__flp+0x1>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	30 97       	sbiw	r30, 0x00	; 0
     fbc:	19 f1       	breq	.+70     	; 0x1004 <malloc+0x6c>
     fbe:	40 81       	ld	r20, Z
     fc0:	51 81       	ldd	r21, Z+1	; 0x01
     fc2:	02 81       	ldd	r16, Z+2	; 0x02
     fc4:	13 81       	ldd	r17, Z+3	; 0x03
     fc6:	48 17       	cp	r20, r24
     fc8:	59 07       	cpc	r21, r25
     fca:	c8 f0       	brcs	.+50     	; 0xffe <malloc+0x66>
     fcc:	84 17       	cp	r24, r20
     fce:	95 07       	cpc	r25, r21
     fd0:	69 f4       	brne	.+26     	; 0xfec <malloc+0x54>
     fd2:	10 97       	sbiw	r26, 0x00	; 0
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <malloc+0x4a>
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	0c 93       	st	X, r16
     fda:	12 97       	sbiw	r26, 0x02	; 2
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	1c 93       	st	X, r17
     fe0:	27 c0       	rjmp	.+78     	; 0x1030 <malloc+0x98>
     fe2:	00 93 80 01 	sts	0x0180, r16	; 0x800180 <__flp>
     fe6:	10 93 81 01 	sts	0x0181, r17	; 0x800181 <__flp+0x1>
     fea:	22 c0       	rjmp	.+68     	; 0x1030 <malloc+0x98>
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	19 f0       	breq	.+6      	; 0xff8 <malloc+0x60>
     ff2:	42 17       	cp	r20, r18
     ff4:	53 07       	cpc	r21, r19
     ff6:	18 f4       	brcc	.+6      	; 0xffe <malloc+0x66>
     ff8:	9a 01       	movw	r18, r20
     ffa:	bd 01       	movw	r22, r26
     ffc:	ef 01       	movw	r28, r30
     ffe:	df 01       	movw	r26, r30
    1000:	f8 01       	movw	r30, r16
    1002:	db cf       	rjmp	.-74     	; 0xfba <malloc+0x22>
    1004:	21 15       	cp	r18, r1
    1006:	31 05       	cpc	r19, r1
    1008:	f9 f0       	breq	.+62     	; 0x1048 <malloc+0xb0>
    100a:	28 1b       	sub	r18, r24
    100c:	39 0b       	sbc	r19, r25
    100e:	24 30       	cpi	r18, 0x04	; 4
    1010:	31 05       	cpc	r19, r1
    1012:	80 f4       	brcc	.+32     	; 0x1034 <malloc+0x9c>
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	61 15       	cp	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	21 f0       	breq	.+8      	; 0x1026 <malloc+0x8e>
    101e:	fb 01       	movw	r30, r22
    1020:	93 83       	std	Z+3, r25	; 0x03
    1022:	82 83       	std	Z+2, r24	; 0x02
    1024:	04 c0       	rjmp	.+8      	; 0x102e <malloc+0x96>
    1026:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <__flp+0x1>
    102a:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__flp>
    102e:	fe 01       	movw	r30, r28
    1030:	32 96       	adiw	r30, 0x02	; 2
    1032:	44 c0       	rjmp	.+136    	; 0x10bc <malloc+0x124>
    1034:	fe 01       	movw	r30, r28
    1036:	e2 0f       	add	r30, r18
    1038:	f3 1f       	adc	r31, r19
    103a:	81 93       	st	Z+, r24
    103c:	91 93       	st	Z+, r25
    103e:	22 50       	subi	r18, 0x02	; 2
    1040:	31 09       	sbc	r19, r1
    1042:	39 83       	std	Y+1, r19	; 0x01
    1044:	28 83       	st	Y, r18
    1046:	3a c0       	rjmp	.+116    	; 0x10bc <malloc+0x124>
    1048:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__brkval>
    104c:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__brkval+0x1>
    1050:	23 2b       	or	r18, r19
    1052:	41 f4       	brne	.+16     	; 0x1064 <malloc+0xcc>
    1054:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1058:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    105c:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <__brkval+0x1>
    1060:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <__brkval>
    1064:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1068:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    106c:	21 15       	cp	r18, r1
    106e:	31 05       	cpc	r19, r1
    1070:	41 f4       	brne	.+16     	; 0x1082 <malloc+0xea>
    1072:	2d b7       	in	r18, 0x3d	; 61
    1074:	3e b7       	in	r19, 0x3e	; 62
    1076:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    107a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    107e:	24 1b       	sub	r18, r20
    1080:	35 0b       	sbc	r19, r21
    1082:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <__brkval>
    1086:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <__brkval+0x1>
    108a:	e2 17       	cp	r30, r18
    108c:	f3 07       	cpc	r31, r19
    108e:	a0 f4       	brcc	.+40     	; 0x10b8 <malloc+0x120>
    1090:	2e 1b       	sub	r18, r30
    1092:	3f 0b       	sbc	r19, r31
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	78 f0       	brcs	.+30     	; 0x10b8 <malloc+0x120>
    109a:	ac 01       	movw	r20, r24
    109c:	4e 5f       	subi	r20, 0xFE	; 254
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	24 17       	cp	r18, r20
    10a2:	35 07       	cpc	r19, r21
    10a4:	48 f0       	brcs	.+18     	; 0x10b8 <malloc+0x120>
    10a6:	4e 0f       	add	r20, r30
    10a8:	5f 1f       	adc	r21, r31
    10aa:	50 93 7f 01 	sts	0x017F, r21	; 0x80017f <__brkval+0x1>
    10ae:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <__brkval>
    10b2:	81 93       	st	Z+, r24
    10b4:	91 93       	st	Z+, r25
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <malloc+0x124>
    10b8:	e0 e0       	ldi	r30, 0x00	; 0
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	cf 01       	movw	r24, r30
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <free>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <free+0xa>
    10d0:	81 c0       	rjmp	.+258    	; 0x11d4 <free+0x10c>
    10d2:	fc 01       	movw	r30, r24
    10d4:	32 97       	sbiw	r30, 0x02	; 2
    10d6:	13 82       	std	Z+3, r1	; 0x03
    10d8:	12 82       	std	Z+2, r1	; 0x02
    10da:	a0 91 80 01 	lds	r26, 0x0180	; 0x800180 <__flp>
    10de:	b0 91 81 01 	lds	r27, 0x0181	; 0x800181 <__flp+0x1>
    10e2:	10 97       	sbiw	r26, 0x00	; 0
    10e4:	81 f4       	brne	.+32     	; 0x1106 <free+0x3e>
    10e6:	20 81       	ld	r18, Z
    10e8:	31 81       	ldd	r19, Z+1	; 0x01
    10ea:	82 0f       	add	r24, r18
    10ec:	93 1f       	adc	r25, r19
    10ee:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__brkval>
    10f2:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__brkval+0x1>
    10f6:	28 17       	cp	r18, r24
    10f8:	39 07       	cpc	r19, r25
    10fa:	51 f5       	brne	.+84     	; 0x1150 <free+0x88>
    10fc:	f0 93 7f 01 	sts	0x017F, r31	; 0x80017f <__brkval+0x1>
    1100:	e0 93 7e 01 	sts	0x017E, r30	; 0x80017e <__brkval>
    1104:	67 c0       	rjmp	.+206    	; 0x11d4 <free+0x10c>
    1106:	ed 01       	movw	r28, r26
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	ce 17       	cp	r28, r30
    110e:	df 07       	cpc	r29, r31
    1110:	40 f4       	brcc	.+16     	; 0x1122 <free+0x5a>
    1112:	4a 81       	ldd	r20, Y+2	; 0x02
    1114:	5b 81       	ldd	r21, Y+3	; 0x03
    1116:	9e 01       	movw	r18, r28
    1118:	41 15       	cp	r20, r1
    111a:	51 05       	cpc	r21, r1
    111c:	f1 f0       	breq	.+60     	; 0x115a <free+0x92>
    111e:	ea 01       	movw	r28, r20
    1120:	f5 cf       	rjmp	.-22     	; 0x110c <free+0x44>
    1122:	d3 83       	std	Z+3, r29	; 0x03
    1124:	c2 83       	std	Z+2, r28	; 0x02
    1126:	40 81       	ld	r20, Z
    1128:	51 81       	ldd	r21, Z+1	; 0x01
    112a:	84 0f       	add	r24, r20
    112c:	95 1f       	adc	r25, r21
    112e:	c8 17       	cp	r28, r24
    1130:	d9 07       	cpc	r29, r25
    1132:	59 f4       	brne	.+22     	; 0x114a <free+0x82>
    1134:	88 81       	ld	r24, Y
    1136:	99 81       	ldd	r25, Y+1	; 0x01
    1138:	84 0f       	add	r24, r20
    113a:	95 1f       	adc	r25, r21
    113c:	02 96       	adiw	r24, 0x02	; 2
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	80 83       	st	Z, r24
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	9b 81       	ldd	r25, Y+3	; 0x03
    1146:	93 83       	std	Z+3, r25	; 0x03
    1148:	82 83       	std	Z+2, r24	; 0x02
    114a:	21 15       	cp	r18, r1
    114c:	31 05       	cpc	r19, r1
    114e:	29 f4       	brne	.+10     	; 0x115a <free+0x92>
    1150:	f0 93 81 01 	sts	0x0181, r31	; 0x800181 <__flp+0x1>
    1154:	e0 93 80 01 	sts	0x0180, r30	; 0x800180 <__flp>
    1158:	3d c0       	rjmp	.+122    	; 0x11d4 <free+0x10c>
    115a:	e9 01       	movw	r28, r18
    115c:	fb 83       	std	Y+3, r31	; 0x03
    115e:	ea 83       	std	Y+2, r30	; 0x02
    1160:	49 91       	ld	r20, Y+
    1162:	59 91       	ld	r21, Y+
    1164:	c4 0f       	add	r28, r20
    1166:	d5 1f       	adc	r29, r21
    1168:	ec 17       	cp	r30, r28
    116a:	fd 07       	cpc	r31, r29
    116c:	61 f4       	brne	.+24     	; 0x1186 <free+0xbe>
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	84 0f       	add	r24, r20
    1174:	95 1f       	adc	r25, r21
    1176:	02 96       	adiw	r24, 0x02	; 2
    1178:	e9 01       	movw	r28, r18
    117a:	99 83       	std	Y+1, r25	; 0x01
    117c:	88 83       	st	Y, r24
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	e0 e0       	ldi	r30, 0x00	; 0
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	8d 91       	ld	r24, X+
    118e:	9c 91       	ld	r25, X
    1190:	13 97       	sbiw	r26, 0x03	; 3
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	19 f0       	breq	.+6      	; 0x119c <free+0xd4>
    1196:	fd 01       	movw	r30, r26
    1198:	dc 01       	movw	r26, r24
    119a:	f7 cf       	rjmp	.-18     	; 0x118a <free+0xc2>
    119c:	8d 91       	ld	r24, X+
    119e:	9c 91       	ld	r25, X
    11a0:	11 97       	sbiw	r26, 0x01	; 1
    11a2:	9d 01       	movw	r18, r26
    11a4:	2e 5f       	subi	r18, 0xFE	; 254
    11a6:	3f 4f       	sbci	r19, 0xFF	; 255
    11a8:	82 0f       	add	r24, r18
    11aa:	93 1f       	adc	r25, r19
    11ac:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <__brkval>
    11b0:	30 91 7f 01 	lds	r19, 0x017F	; 0x80017f <__brkval+0x1>
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	69 f4       	brne	.+26     	; 0x11d4 <free+0x10c>
    11ba:	30 97       	sbiw	r30, 0x00	; 0
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <free+0x100>
    11be:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <__flp+0x1>
    11c2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__flp>
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <free+0x104>
    11c8:	13 82       	std	Z+3, r1	; 0x03
    11ca:	12 82       	std	Z+2, r1	; 0x02
    11cc:	b0 93 7f 01 	sts	0x017F, r27	; 0x80017f <__brkval+0x1>
    11d0:	a0 93 7e 01 	sts	0x017E, r26	; 0x80017e <__brkval>
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <memset>:
    11da:	dc 01       	movw	r26, r24
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <memset+0x6>
    11de:	6d 93       	st	X+, r22
    11e0:	41 50       	subi	r20, 0x01	; 1
    11e2:	50 40       	sbci	r21, 0x00	; 0
    11e4:	e0 f7       	brcc	.-8      	; 0x11de <memset+0x4>
    11e6:	08 95       	ret

000011e8 <_exit>:
    11e8:	f8 94       	cli

000011ea <__stop_program>:
    11ea:	ff cf       	rjmp	.-2      	; 0x11ea <__stop_program>
