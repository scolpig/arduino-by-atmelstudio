
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000002b4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800118  00800118  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8d  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090c  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d5  00000000  00000000  000018f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cb  00000000  00000000  00002413  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000028de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  9e:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND_test>:
void FND_init(void){
	FND_DDR = 0b11111111;
	FND_PORT = 0b11111111;
	return;
}
void FND_test(void){
  a6:	e0 e0       	ldi	r30, 0x00	; 0
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	2a e0       	ldi	r18, 0x0A	; 10
  ac:	31 e0       	ldi	r19, 0x01	; 1
	
	for(int i=0;i<10;i++){
		FND_PORT = FND_font[i];
  ae:	81 91       	ld	r24, Z+
  b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	89 e6       	ldi	r24, 0x69	; 105
  b6:	98 e1       	ldi	r25, 0x18	; 24
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <FND_test+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <FND_test+0x1c>
  c2:	00 00       	nop
	FND_PORT = 0b11111111;
	return;
}
void FND_test(void){
	
	for(int i=0;i<10;i++){
  c4:	e2 17       	cp	r30, r18
  c6:	f3 07       	cpc	r31, r19
  c8:	91 f7       	brne	.-28     	; 0xae <FND_test+0x8>
		FND_PORT = FND_font[i];
		_delay_ms(500);
	}
	return;
  ca:	08 95       	ret

000000cc <FND_update_time>:
	FND[1] = FND4digit_font[number/10%10];
	FND[2] = FND4digit_font[number/100%10];
	FND[3] = FND4digit_font[number/1000%10];
	return;
}
void FND_update_time(int msec, char sec){
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	8c 01       	movw	r16, r24
  d6:	26 2f       	mov	r18, r22
	FND[0] = FND4digit_font[msec/10%10];
  d8:	c8 e1       	ldi	r28, 0x18	; 24
  da:	d1 e0       	ldi	r29, 0x01	; 1
  dc:	ea e0       	ldi	r30, 0x0A	; 10
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	bf 01       	movw	r22, r30
  e2:	0e 94 30 01 	call	0x260	; 0x260 <__divmodhi4>
  e6:	cb 01       	movw	r24, r22
  e8:	bf 01       	movw	r22, r30
  ea:	0e 94 30 01 	call	0x260	; 0x260 <__divmodhi4>
  ee:	dc 01       	movw	r26, r24
  f0:	a2 5f       	subi	r26, 0xF2	; 242
  f2:	be 4f       	sbci	r27, 0xFE	; 254
  f4:	8c 91       	ld	r24, X
  f6:	88 83       	st	Y, r24
	FND[1] = FND4digit_font[msec/100%10];
  f8:	c8 01       	movw	r24, r16
  fa:	64 e6       	ldi	r22, 0x64	; 100
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 30 01 	call	0x260	; 0x260 <__divmodhi4>
 102:	cb 01       	movw	r24, r22
 104:	bf 01       	movw	r22, r30
 106:	0e 94 30 01 	call	0x260	; 0x260 <__divmodhi4>
 10a:	fc 01       	movw	r30, r24
 10c:	e2 5f       	subi	r30, 0xF2	; 242
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 81       	ld	r24, Z
 112:	89 83       	std	Y+1, r24	; 0x01
	FND[2] = FND4digit_font[sec%10] & ~(1 << FND_p);
 114:	8d ec       	ldi	r24, 0xCD	; 205
 116:	28 9f       	mul	r18, r24
 118:	e1 2d       	mov	r30, r1
 11a:	11 24       	eor	r1, r1
 11c:	e6 95       	lsr	r30
 11e:	e6 95       	lsr	r30
 120:	e6 95       	lsr	r30
 122:	3e 2f       	mov	r19, r30
 124:	33 0f       	add	r19, r19
 126:	93 2f       	mov	r25, r19
 128:	99 0f       	add	r25, r25
 12a:	99 0f       	add	r25, r25
 12c:	93 0f       	add	r25, r19
 12e:	29 1b       	sub	r18, r25
 130:	a2 2f       	mov	r26, r18
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	a2 5f       	subi	r26, 0xF2	; 242
 136:	be 4f       	sbci	r27, 0xFE	; 254
 138:	9c 91       	ld	r25, X
 13a:	9b 7f       	andi	r25, 0xFB	; 251
 13c:	9a 83       	std	Y+2, r25	; 0x02
	FND[3] = FND4digit_font[sec/10%10];
 13e:	e8 9f       	mul	r30, r24
 140:	81 2d       	mov	r24, r1
 142:	11 24       	eor	r1, r1
 144:	86 95       	lsr	r24
 146:	86 95       	lsr	r24
 148:	86 95       	lsr	r24
 14a:	88 0f       	add	r24, r24
 14c:	98 2f       	mov	r25, r24
 14e:	99 0f       	add	r25, r25
 150:	99 0f       	add	r25, r25
 152:	89 0f       	add	r24, r25
 154:	e8 1b       	sub	r30, r24
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	e2 5f       	subi	r30, 0xF2	; 242
 15a:	fe 4f       	sbci	r31, 0xFE	; 254
 15c:	80 81       	ld	r24, Z
 15e:	8b 83       	std	Y+3, r24	; 0x03
	return;
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <FND4digit_init>:
void FND4digit_init(void){
	DDRB |= 0b00001111;
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	8f 60       	ori	r24, 0x0F	; 15
 16e:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0b11110000;
 170:	85 b1       	in	r24, 0x05	; 5
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	85 b9       	out	0x05, r24	; 5
	FND_DDR |= 0b11111111;
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	8a b9       	out	0x0a, r24	; 10
	FND_PORT |= 0b11111111;
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	8b b9       	out	0x0b, r24	; 11
 180:	08 95       	ret

00000182 <FND4digit_main>:
	unsigned int number = 5000;
	char sec=0, min=0;
	int msec=0;
	char long_key_flag=1, start_flag=0, lap_flag=0;
	
	FND4digit_init();
 182:	0e 94 b5 00 	call	0x16a	; 0x16a <FND4digit_init>
	DDRB &= 0b11001111;
 186:	84 b1       	in	r24, 0x04	; 4
 188:	8f 7c       	andi	r24, 0xCF	; 207
 18a:	84 b9       	out	0x04, r24	; 4
	FND_update_time(msec, sec);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 66 00 	call	0xcc	; 0xcc <FND_update_time>
void FND4digit_main(void){
	
	unsigned int number = 5000;
	char sec=0, min=0;
	int msec=0;
	char long_key_flag=1, start_flag=0, lap_flag=0;
 196:	c1 2c       	mov	r12, r1
 198:	00 e0       	ldi	r16, 0x00	; 0
 19a:	11 e0       	ldi	r17, 0x01	; 1
char FND[4];
void FND4digit_main(void){
	
	unsigned int number = 5000;
	char sec=0, min=0;
	int msec=0;
 19c:	e1 2c       	mov	r14, r1
 19e:	f1 2c       	mov	r15, r1
char FND4digit_digit[4] = {1 << digit1, 1 << digit2, 1 << digit3, 1 << digit4};
char FND[4];
void FND4digit_main(void){
	
	unsigned int number = 5000;
	char sec=0, min=0;
 1a0:	a1 2c       	mov	r10, r1
 1a2:	d1 2c       	mov	r13, r1
			else if(!(PINB & 0b00100000)){
				FND_update_time(msec, sec);
				msec = 0;
				sec = 0;
				start_flag = 0;
				lap_flag=0;
 1a4:	b1 2c       	mov	r11, r1
	FND_update_time(msec, sec);
	while(1){
		if(long_key_flag){
			if(!(PINB & 0b00010000)){
				if(!start_flag)start_flag=1;
				if(lap_flag)lap_flag=0;
 1a6:	99 24       	eor	r9, r9
 1a8:	93 94       	inc	r9
 1aa:	ce e0       	ldi	r28, 0x0E	; 14
 1ac:	d1 e0       	ldi	r29, 0x01	; 1
	
	FND4digit_init();
	DDRB &= 0b11001111;
	FND_update_time(msec, sec);
	while(1){
		if(long_key_flag){
 1ae:	11 23       	and	r17, r17
 1b0:	c1 f0       	breq	.+48     	; 0x1e2 <FND4digit_main+0x60>
			if(!(PINB & 0b00010000)){
 1b2:	1c 99       	sbic	0x03, 4	; 3
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <FND4digit_main+0x46>
				if(!start_flag)start_flag=1;
 1b6:	01 11       	cpse	r16, r1
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <FND4digit_main+0x3a>
 1ba:	09 2d       	mov	r16, r9
				if(lap_flag)lap_flag=0;
 1bc:	89 2d       	mov	r24, r9
 1be:	c1 10       	cpse	r12, r1
 1c0:	8b 2d       	mov	r24, r11
 1c2:	c8 2e       	mov	r12, r24
				else lap_flag=1;
				long_key_flag = 0;
 1c4:	1b 2d       	mov	r17, r11
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <FND4digit_main+0x6c>
			}
			else if(!(PINB & 0b00100000)){
 1c8:	1d 99       	sbic	0x03, 5	; 3
 1ca:	11 c0       	rjmp	.+34     	; 0x1ee <FND4digit_main+0x6c>
				FND_update_time(msec, sec);
 1cc:	6d 2d       	mov	r22, r13
 1ce:	c7 01       	movw	r24, r14
 1d0:	0e 94 66 00 	call	0xcc	; 0xcc <FND_update_time>
				msec = 0;
				sec = 0;
				start_flag = 0;
				lap_flag=0;
 1d4:	cb 2c       	mov	r12, r11
			}
			else if(!(PINB & 0b00100000)){
				FND_update_time(msec, sec);
				msec = 0;
				sec = 0;
				start_flag = 0;
 1d6:	0b 2d       	mov	r16, r11
				lap_flag=0;
				long_key_flag = 0;
 1d8:	1b 2d       	mov	r17, r11
				else lap_flag=1;
				long_key_flag = 0;
			}
			else if(!(PINB & 0b00100000)){
				FND_update_time(msec, sec);
				msec = 0;
 1da:	e1 2c       	mov	r14, r1
 1dc:	f1 2c       	mov	r15, r1
				sec = 0;
 1de:	d1 2c       	mov	r13, r1
 1e0:	28 c0       	rjmp	.+80     	; 0x232 <FND4digit_main+0xb0>
				lap_flag=0;
				long_key_flag = 0;
			}
		}
		else {
			if((PINB & 0b00010000) && (PINB & 0b00100000)){
 1e2:	1c 9b       	sbis	0x03, 4	; 3
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <FND4digit_main+0x6c>
 1e6:	13 b1       	in	r17, 0x03	; 3
 1e8:	15 fb       	bst	r17, 5
 1ea:	11 27       	eor	r17, r17
 1ec:	10 f9       	bld	r17, 0
				long_key_flag = 1;
			}
		}
		if(start_flag){
 1ee:	00 23       	and	r16, r16
 1f0:	01 f1       	breq	.+64     	; 0x232 <FND4digit_main+0xb0>
			msec = msec + 8;
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	e8 0e       	add	r14, r24
 1f6:	f1 1c       	adc	r15, r1
			if(msec >= 1000){
 1f8:	98 ee       	ldi	r25, 0xE8	; 232
 1fa:	e9 16       	cp	r14, r25
 1fc:	93 e0       	ldi	r25, 0x03	; 3
 1fe:	f9 06       	cpc	r15, r25
 200:	94 f0       	brlt	.+36     	; 0x226 <FND4digit_main+0xa4>
				msec=0;
				sec++;
 202:	d3 94       	inc	r13
				if(sec >= 60){
 204:	8b e3       	ldi	r24, 0x3B	; 59
 206:	8d 15       	cp	r24, r13
 208:	40 f4       	brcc	.+16     	; 0x21a <FND4digit_main+0x98>
					sec=0;
					min++;
 20a:	a3 94       	inc	r10
					if(min >= 60){
 20c:	8a 15       	cp	r24, r10
 20e:	40 f4       	brcc	.+16     	; 0x220 <FND4digit_main+0x9e>
			}
		}
		if(start_flag){
			msec = msec + 8;
			if(msec >= 1000){
				msec=0;
 210:	e1 2c       	mov	r14, r1
 212:	f1 2c       	mov	r15, r1
				sec++;
				if(sec >= 60){
					sec=0;
					min++;
					if(min >= 60){
						min = 0;
 214:	a1 2c       	mov	r10, r1
			msec = msec + 8;
			if(msec >= 1000){
				msec=0;
				sec++;
				if(sec >= 60){
					sec=0;
 216:	d1 2c       	mov	r13, r1
 218:	06 c0       	rjmp	.+12     	; 0x226 <FND4digit_main+0xa4>
			}
		}
		if(start_flag){
			msec = msec + 8;
			if(msec >= 1000){
				msec=0;
 21a:	e1 2c       	mov	r14, r1
 21c:	f1 2c       	mov	r15, r1
 21e:	03 c0       	rjmp	.+6      	; 0x226 <FND4digit_main+0xa4>
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
				sec++;
				if(sec >= 60){
					sec=0;
 224:	d1 2c       	mov	r13, r1
					if(min >= 60){
						min = 0;
					}
				}
			}
			if(lap_flag)FND_update_time(msec, sec);
 226:	cc 20       	and	r12, r12
 228:	21 f0       	breq	.+8      	; 0x232 <FND4digit_main+0xb0>
 22a:	6d 2d       	mov	r22, r13
 22c:	c7 01       	movw	r24, r14
 22e:	0e 94 66 00 	call	0xcc	; 0xcc <FND_update_time>
 232:	ea e0       	ldi	r30, 0x0A	; 10
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	a8 e1       	ldi	r26, 0x18	; 24
 238:	b1 e0       	ldi	r27, 0x01	; 1
		}
		for(int i=0;i<4;i++){
			PORTB = FND4digit_digit[i];
 23a:	81 91       	ld	r24, Z+
 23c:	85 b9       	out	0x05, r24	; 5
			FND_PORT = FND[i];
 23e:	8d 91       	ld	r24, X+
 240:	8b b9       	out	0x0b, r24	; 11
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	9f e1       	ldi	r25, 0x1F	; 31
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <FND4digit_main+0xc4>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <FND4digit_main+0xca>
 24c:	00 00       	nop
					}
				}
			}
			if(lap_flag)FND_update_time(msec, sec);
		}
		for(int i=0;i<4;i++){
 24e:	ec 17       	cp	r30, r28
 250:	fd 07       	cpc	r31, r29
 252:	99 f7       	brne	.-26     	; 0x23a <FND4digit_main+0xb8>
 254:	ac cf       	rjmp	.-168    	; 0x1ae <FND4digit_main+0x2c>

00000256 <main>:
#include "LEDBar.h"
#include "FND.h"

int main(void)
{
    FND4digit_main();
 256:	0e 94 c1 00 	call	0x182	; 0x182 <FND4digit_main>
	
    while (1) 
    {
		FND_test();
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <FND_test>
 25e:	fd cf       	rjmp	.-6      	; 0x25a <main+0x4>

00000260 <__divmodhi4>:
 260:	97 fb       	bst	r25, 7
 262:	07 2e       	mov	r0, r23
 264:	16 f4       	brtc	.+4      	; 0x26a <__divmodhi4+0xa>
 266:	00 94       	com	r0
 268:	07 d0       	rcall	.+14     	; 0x278 <__divmodhi4_neg1>
 26a:	77 fd       	sbrc	r23, 7
 26c:	09 d0       	rcall	.+18     	; 0x280 <__divmodhi4_neg2>
 26e:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodhi4>
 272:	07 fc       	sbrc	r0, 7
 274:	05 d0       	rcall	.+10     	; 0x280 <__divmodhi4_neg2>
 276:	3e f4       	brtc	.+14     	; 0x286 <__divmodhi4_exit>

00000278 <__divmodhi4_neg1>:
 278:	90 95       	com	r25
 27a:	81 95       	neg	r24
 27c:	9f 4f       	sbci	r25, 0xFF	; 255
 27e:	08 95       	ret

00000280 <__divmodhi4_neg2>:
 280:	70 95       	com	r23
 282:	61 95       	neg	r22
 284:	7f 4f       	sbci	r23, 0xFF	; 255

00000286 <__divmodhi4_exit>:
 286:	08 95       	ret

00000288 <__udivmodhi4>:
 288:	aa 1b       	sub	r26, r26
 28a:	bb 1b       	sub	r27, r27
 28c:	51 e1       	ldi	r21, 0x11	; 17
 28e:	07 c0       	rjmp	.+14     	; 0x29e <__udivmodhi4_ep>

00000290 <__udivmodhi4_loop>:
 290:	aa 1f       	adc	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	a6 17       	cp	r26, r22
 296:	b7 07       	cpc	r27, r23
 298:	10 f0       	brcs	.+4      	; 0x29e <__udivmodhi4_ep>
 29a:	a6 1b       	sub	r26, r22
 29c:	b7 0b       	sbc	r27, r23

0000029e <__udivmodhi4_ep>:
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	5a 95       	dec	r21
 2a4:	a9 f7       	brne	.-22     	; 0x290 <__udivmodhi4_loop>
 2a6:	80 95       	com	r24
 2a8:	90 95       	com	r25
 2aa:	bc 01       	movw	r22, r24
 2ac:	cd 01       	movw	r24, r26
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
