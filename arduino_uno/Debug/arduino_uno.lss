
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010e  0080010e  000003c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c07  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000984  00000000  00000000  000010cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064b  00000000  00000000  00001a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a8  00000000  00000000  0000261c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  9e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND_update_value>:
			_delay_ms(2);
		}
	
	}
}
void FND_update_value(int number){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	FND[0] = FND4digit_font[number%10];
  ac:	e1 e1       	ldi	r30, 0x11	; 17
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	2a e0       	ldi	r18, 0x0A	; 10
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	b9 01       	movw	r22, r18
  b6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  ba:	dc 01       	movw	r26, r24
  bc:	ac 5f       	subi	r26, 0xFC	; 252
  be:	be 4f       	sbci	r27, 0xFE	; 254
  c0:	8c 91       	ld	r24, X
  c2:	80 83       	st	Z, r24
	FND[1] = FND4digit_font[number/10%10];
  c4:	cb 01       	movw	r24, r22
  c6:	b9 01       	movw	r22, r18
  c8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  cc:	dc 01       	movw	r26, r24
  ce:	ac 5f       	subi	r26, 0xFC	; 252
  d0:	be 4f       	sbci	r27, 0xFE	; 254
  d2:	8c 91       	ld	r24, X
  d4:	81 83       	std	Z+1, r24	; 0x01
	FND[2] = FND4digit_font[number/100%10];
  d6:	ce 01       	movw	r24, r28
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  e0:	cb 01       	movw	r24, r22
  e2:	b9 01       	movw	r22, r18
  e4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  e8:	dc 01       	movw	r26, r24
  ea:	ac 5f       	subi	r26, 0xFC	; 252
  ec:	be 4f       	sbci	r27, 0xFE	; 254
  ee:	8c 91       	ld	r24, X
  f0:	82 83       	std	Z+2, r24	; 0x02
	FND[3] = FND4digit_font[number/1000%10];
  f2:	ce 01       	movw	r24, r28
  f4:	68 ee       	ldi	r22, 0xE8	; 232
  f6:	73 e0       	ldi	r23, 0x03	; 3
  f8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
  fc:	cb 01       	movw	r24, r22
  fe:	b9 01       	movw	r22, r18
 100:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 104:	dc 01       	movw	r26, r24
 106:	ac 5f       	subi	r26, 0xFC	; 252
 108:	be 4f       	sbci	r27, 0xFE	; 254
 10a:	8c 91       	ld	r24, X
 10c:	83 83       	std	Z+3, r24	; 0x03
	return;
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <FND_update_time>:
void FND_update_time(int msec, char sec){
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	8c 01       	movw	r16, r24
 11e:	26 2f       	mov	r18, r22
	FND[0] = FND4digit_font[msec/10%10];
 120:	c1 e1       	ldi	r28, 0x11	; 17
 122:	d1 e0       	ldi	r29, 0x01	; 1
 124:	ea e0       	ldi	r30, 0x0A	; 10
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	bf 01       	movw	r22, r30
 12a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 12e:	cb 01       	movw	r24, r22
 130:	bf 01       	movw	r22, r30
 132:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 136:	dc 01       	movw	r26, r24
 138:	ac 5f       	subi	r26, 0xFC	; 252
 13a:	be 4f       	sbci	r27, 0xFE	; 254
 13c:	8c 91       	ld	r24, X
 13e:	88 83       	st	Y, r24
	FND[1] = FND4digit_font[msec/100%10];
 140:	c8 01       	movw	r24, r16
 142:	64 e6       	ldi	r22, 0x64	; 100
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 14a:	cb 01       	movw	r24, r22
 14c:	bf 01       	movw	r22, r30
 14e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 152:	fc 01       	movw	r30, r24
 154:	ec 5f       	subi	r30, 0xFC	; 252
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01
	FND[2] = FND4digit_font[sec%10] & ~(1 << FND_p);
 15c:	8d ec       	ldi	r24, 0xCD	; 205
 15e:	28 9f       	mul	r18, r24
 160:	e1 2d       	mov	r30, r1
 162:	11 24       	eor	r1, r1
 164:	e6 95       	lsr	r30
 166:	e6 95       	lsr	r30
 168:	e6 95       	lsr	r30
 16a:	3e 2f       	mov	r19, r30
 16c:	33 0f       	add	r19, r19
 16e:	93 2f       	mov	r25, r19
 170:	99 0f       	add	r25, r25
 172:	99 0f       	add	r25, r25
 174:	93 0f       	add	r25, r19
 176:	29 1b       	sub	r18, r25
 178:	a2 2f       	mov	r26, r18
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ac 5f       	subi	r26, 0xFC	; 252
 17e:	be 4f       	sbci	r27, 0xFE	; 254
 180:	9c 91       	ld	r25, X
 182:	9b 7f       	andi	r25, 0xFB	; 251
 184:	9a 83       	std	Y+2, r25	; 0x02
	FND[3] = FND4digit_font[sec/10%10];
 186:	e8 9f       	mul	r30, r24
 188:	81 2d       	mov	r24, r1
 18a:	11 24       	eor	r1, r1
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	88 0f       	add	r24, r24
 194:	98 2f       	mov	r25, r24
 196:	99 0f       	add	r25, r25
 198:	99 0f       	add	r25, r25
 19a:	89 0f       	add	r24, r25
 19c:	e8 1b       	sub	r30, r24
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ec 5f       	subi	r30, 0xFC	; 252
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 81       	ld	r24, Z
 1a6:	8b 83       	std	Y+3, r24	; 0x03
	return;
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <FND4digit_init>:
void FND4digit_init(void){
	FND_COM_DDR |= 0b00001111;
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	8f 60       	ori	r24, 0x0F	; 15
 1b6:	84 b9       	out	0x04, r24	; 4
	FND_COM_PORT &= 0b11110000;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	85 b9       	out	0x05, r24	; 5
	FND_DATA_DDR |= 0b11111111;
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	8a b9       	out	0x0a, r24	; 10
	FND_DATA_PORT |= 0b11111111;
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	08 95       	ret

000001ca <main>:

extern int Timer_main(void);

int main(void)
{
    Timer_main();
 1ca:	0e 94 41 01 	call	0x282	; 0x282 <Timer_main>
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0x4>

000001d0 <__vector_14>:
extern const char YOON[8];
extern char name[3][8];
extern char FND4digit_digit[4];
extern char FND[4];

ISR(TIMER0_COMPA_vect){
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	static int msec = 0;
	static char i = 0;
	msec++;
 1ec:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <msec.1766>
 1f0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <msec.1766+0x1>
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <msec.1766+0x1>
 1fa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <msec.1766>
	i++;
 1fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 202:	8f 5f       	subi	r24, 0xFF	; 255
	if(i>=4)i=0;
 204:	84 30       	cpi	r24, 0x04	; 4
 206:	18 f4       	brcc	.+6      	; 0x20e <__vector_14+0x3e>

ISR(TIMER0_COMPA_vect){
	static int msec = 0;
	static char i = 0;
	msec++;
	i++;
 208:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 20c:	02 c0       	rjmp	.+4      	; 0x212 <__vector_14+0x42>
	if(i>=4)i=0;
 20e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	FND_COM_PORT = FND4digit_digit[i];
 212:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	e0 50       	subi	r30, 0x00	; 0
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	80 81       	ld	r24, Z
 21e:	85 b9       	out	0x05, r24	; 5
	FND_DATA_PORT = FND[i];
 220:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ef 5e       	subi	r30, 0xEF	; 239
 228:	fe 4f       	sbci	r31, 0xFE	; 254
 22a:	80 81       	ld	r24, Z
 22c:	8b b9       	out	0x0b, r24	; 11
	if(!(msec%500))PORTB ^= 1<<PORTB5;
 22e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <msec.1766>
 232:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <msec.1766+0x1>
 236:	64 ef       	ldi	r22, 0xF4	; 244
 238:	71 e0       	ldi	r23, 0x01	; 1
 23a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 23e:	89 2b       	or	r24, r25
 240:	21 f4       	brne	.+8      	; 0x24a <__vector_14+0x7a>
 242:	95 b1       	in	r25, 0x05	; 5
 244:	80 e2       	ldi	r24, 0x20	; 32
 246:	89 27       	eor	r24, r25
 248:	85 b9       	out	0x05, r24	; 5
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

00000266 <Timer0_init>:
		}*/
	}
	return 0;
}
void Timer0_init(void){
	TCCR0A |= 1 << WGM01;            //CTC Mode
 266:	84 b5       	in	r24, 0x24	; 36
 268:	82 60       	ori	r24, 0x02	; 2
 26a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS00 | 1 << CS01; //64분주
 26c:	85 b5       	in	r24, 0x25	; 37
 26e:	83 60       	ori	r24, 0x03	; 3
 270:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;					 // 1ms 주기
 272:	89 ef       	ldi	r24, 0xF9	; 249
 274:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;           //OC0A 비교 매치 인터럽트 활성화
 276:	ee e6       	ldi	r30, 0x6E	; 110
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	80 83       	st	Z, r24
 280:	08 95       	ret

00000282 <Timer_main>:
}

int Timer_main(void){
	int msec = 0;
	char sec = 0;
	DDRB |= 1<<PORTB5;
 282:	25 9a       	sbi	0x04, 5	; 4
	FND4digit_init();
 284:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <FND4digit_init>
	FND_update_value(1234);
 288:	82 ed       	ldi	r24, 0xD2	; 210
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	0e 94 53 00 	call	0xa6	; 0xa6 <FND_update_value>
	Timer0_init();
 290:	0e 94 33 01 	call	0x266	; 0x266 <Timer0_init>
	sei();
 294:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	8f e9       	ldi	r24, 0x9F	; 159
 298:	9f e0       	ldi	r25, 0x0F	; 15
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <Timer_main+0x18>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <Timer_main+0x1e>
 2a0:	00 00       	nop
	if(!(msec%500))PORTB ^= 1<<PORTB5;
}

int Timer_main(void){
	int msec = 0;
	char sec = 0;
 2a2:	10 e0       	ldi	r17, 0x00	; 0
	FND_update_value(1234);
	Timer0_init();
	sei();
	while(1){
		_delay_ms(1);
		msec++;
 2a4:	c1 e0       	ldi	r28, 0x01	; 1
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <Timer_main+0x2e>
		if(msec >= 1000){
			msec = 0;
			sec++;
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
	sei();
	while(1){
		_delay_ms(1);
		msec++;
		if(msec >= 1000){
			msec = 0;
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
			sec++;
		}
		FND_update_time(msec, sec);
 2b0:	61 2f       	mov	r22, r17
 2b2:	ce 01       	movw	r24, r28
 2b4:	0e 94 8a 00 	call	0x114	; 0x114 <FND_update_time>
 2b8:	8f e9       	ldi	r24, 0x9F	; 159
 2ba:	9f e0       	ldi	r25, 0x0F	; 15
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <Timer_main+0x3a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <Timer_main+0x40>
 2c2:	00 00       	nop
	FND_update_value(1234);
	Timer0_init();
	sei();
	while(1){
		_delay_ms(1);
		msec++;
 2c4:	21 96       	adiw	r28, 0x01	; 1
		if(msec >= 1000){
 2c6:	c8 3e       	cpi	r28, 0xE8	; 232
 2c8:	93 e0       	ldi	r25, 0x03	; 3
 2ca:	d9 07       	cpc	r29, r25
 2cc:	74 f7       	brge	.-36     	; 0x2aa <Timer_main+0x28>
 2ce:	f0 cf       	rjmp	.-32     	; 0x2b0 <Timer_main+0x2e>

000002d0 <__divmodhi4>:
 2d0:	97 fb       	bst	r25, 7
 2d2:	07 2e       	mov	r0, r23
 2d4:	16 f4       	brtc	.+4      	; 0x2da <__divmodhi4+0xa>
 2d6:	00 94       	com	r0
 2d8:	07 d0       	rcall	.+14     	; 0x2e8 <__divmodhi4_neg1>
 2da:	77 fd       	sbrc	r23, 7
 2dc:	09 d0       	rcall	.+18     	; 0x2f0 <__divmodhi4_neg2>
 2de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__udivmodhi4>
 2e2:	07 fc       	sbrc	r0, 7
 2e4:	05 d0       	rcall	.+10     	; 0x2f0 <__divmodhi4_neg2>
 2e6:	3e f4       	brtc	.+14     	; 0x2f6 <__divmodhi4_exit>

000002e8 <__divmodhi4_neg1>:
 2e8:	90 95       	com	r25
 2ea:	81 95       	neg	r24
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	08 95       	ret

000002f0 <__divmodhi4_neg2>:
 2f0:	70 95       	com	r23
 2f2:	61 95       	neg	r22
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255

000002f6 <__divmodhi4_exit>:
 2f6:	08 95       	ret

000002f8 <__udivmodhi4>:
 2f8:	aa 1b       	sub	r26, r26
 2fa:	bb 1b       	sub	r27, r27
 2fc:	51 e1       	ldi	r21, 0x11	; 17
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <__udivmodhi4_ep>

00000300 <__udivmodhi4_loop>:
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	a6 17       	cp	r26, r22
 306:	b7 07       	cpc	r27, r23
 308:	10 f0       	brcs	.+4      	; 0x30e <__udivmodhi4_ep>
 30a:	a6 1b       	sub	r26, r22
 30c:	b7 0b       	sbc	r27, r23

0000030e <__udivmodhi4_ep>:
 30e:	88 1f       	adc	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	5a 95       	dec	r21
 314:	a9 f7       	brne	.-22     	; 0x300 <__udivmodhi4_loop>
 316:	80 95       	com	r24
 318:	90 95       	com	r25
 31a:	bc 01       	movw	r22, r24
 31c:	cd 01       	movw	r24, r26
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
