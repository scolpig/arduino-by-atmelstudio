
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010e  0080010e  000004a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ccb  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00001277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000752  00000000  00000000  00001bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00002328  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000645  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  9e:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND_update_value>:
	FND[0] = FND4digit_font[sec%10];
	FND[1] = FND4digit_font[sec/10%10];
	FND[2] = FND4digit_font[min%10] & ~(1 << FND_p);
	FND[3] = FND4digit_font[min/10%10];
	return;
}
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
  ac:	ee e0       	ldi	r30, 0x0E	; 14
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	2a e0       	ldi	r18, 0x0A	; 10
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	b9 01       	movw	r22, r18
  b6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
  ba:	dc 01       	movw	r26, r24
  bc:	ac 5f       	subi	r26, 0xFC	; 252
  be:	be 4f       	sbci	r27, 0xFE	; 254
  c0:	8c 91       	ld	r24, X
  c2:	80 83       	st	Z, r24
  c4:	cb 01       	movw	r24, r22
  c6:	b9 01       	movw	r22, r18
  c8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
  cc:	dc 01       	movw	r26, r24
  ce:	ac 5f       	subi	r26, 0xFC	; 252
  d0:	be 4f       	sbci	r27, 0xFE	; 254
  d2:	8c 91       	ld	r24, X
  d4:	81 83       	std	Z+1, r24	; 0x01
  d6:	ce 01       	movw	r24, r28
  d8:	64 e6       	ldi	r22, 0x64	; 100
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
  e0:	cb 01       	movw	r24, r22
  e2:	b9 01       	movw	r22, r18
  e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
  e8:	dc 01       	movw	r26, r24
  ea:	ac 5f       	subi	r26, 0xFC	; 252
  ec:	be 4f       	sbci	r27, 0xFE	; 254
  ee:	8c 91       	ld	r24, X
  f0:	82 83       	std	Z+2, r24	; 0x02
  f2:	ce 01       	movw	r24, r28
  f4:	68 ee       	ldi	r22, 0xE8	; 232
  f6:	73 e0       	ldi	r23, 0x03	; 3
  f8:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
  fc:	cb 01       	movw	r24, r22
  fe:	b9 01       	movw	r22, r18
 100:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 104:	dc 01       	movw	r26, r24
 106:	ac 5f       	subi	r26, 0xFC	; 252
 108:	be 4f       	sbci	r27, 0xFE	; 254
 10a:	8c 91       	ld	r24, X
 10c:	83 83       	std	Z+3, r24	; 0x03
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <FND_update_time>:
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	8c 01       	movw	r16, r24
 11e:	26 2f       	mov	r18, r22
 120:	ce e0       	ldi	r28, 0x0E	; 14
 122:	d1 e0       	ldi	r29, 0x01	; 1
 124:	ea e0       	ldi	r30, 0x0A	; 10
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	bf 01       	movw	r22, r30
 12a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 12e:	cb 01       	movw	r24, r22
 130:	bf 01       	movw	r22, r30
 132:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 136:	dc 01       	movw	r26, r24
 138:	ac 5f       	subi	r26, 0xFC	; 252
 13a:	be 4f       	sbci	r27, 0xFE	; 254
 13c:	8c 91       	ld	r24, X
 13e:	88 83       	st	Y, r24
 140:	c8 01       	movw	r24, r16
 142:	64 e6       	ldi	r22, 0x64	; 100
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 14a:	cb 01       	movw	r24, r22
 14c:	bf 01       	movw	r22, r30
 14e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 152:	fc 01       	movw	r30, r24
 154:	ec 5f       	subi	r30, 0xFC	; 252
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 81       	ld	r24, Z
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	8d ec       	ldi	r24, 0xCD	; 205
 15e:	28 9f       	mul	r18, r24
 160:	e1 2d       	mov	r30, r1
 162:	11 24       	eor	r1, r1
 164:	e6 95       	lsr	r30
 166:	e6 95       	lsr	r30
 168:	e6 95       	lsr	r30
 16a:	3e 2f       	mov	r19, r30
 16c:	33 0f       	add	r19, r19
 16e:	93 2f       	mov	r25, r19
 170:	99 0f       	add	r25, r25
 172:	99 0f       	add	r25, r25
 174:	93 0f       	add	r25, r19
 176:	29 1b       	sub	r18, r25
 178:	a2 2f       	mov	r26, r18
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	ac 5f       	subi	r26, 0xFC	; 252
 17e:	be 4f       	sbci	r27, 0xFE	; 254
 180:	9c 91       	ld	r25, X
 182:	9b 7f       	andi	r25, 0xFB	; 251
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	e8 9f       	mul	r30, r24
 188:	81 2d       	mov	r24, r1
 18a:	11 24       	eor	r1, r1
 18c:	86 95       	lsr	r24
 18e:	86 95       	lsr	r24
 190:	86 95       	lsr	r24
 192:	88 0f       	add	r24, r24
 194:	98 2f       	mov	r25, r24
 196:	99 0f       	add	r25, r25
 198:	99 0f       	add	r25, r25
 19a:	89 0f       	add	r24, r25
 19c:	e8 1b       	sub	r30, r24
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ec 5f       	subi	r30, 0xFC	; 252
 1a2:	fe 4f       	sbci	r31, 0xFE	; 254
 1a4:	80 81       	ld	r24, Z
 1a6:	8b 83       	std	Y+3, r24	; 0x03
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <FND4digit_init>:
void FND4digit_init(void){
	FND_COM_DDR |= 0b00001111;
 1b2:	84 b1       	in	r24, 0x04	; 4
 1b4:	8f 60       	ori	r24, 0x0F	; 15
 1b6:	84 b9       	out	0x04, r24	; 4
	FND_COM_PORT &= 0b11110000;
 1b8:	85 b1       	in	r24, 0x05	; 5
 1ba:	80 7f       	andi	r24, 0xF0	; 240
 1bc:	85 b9       	out	0x05, r24	; 5
	FND_DATA_DDR |= 0b11111111;
 1be:	8a b1       	in	r24, 0x0a	; 10
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	8a b9       	out	0x0a, r24	; 10
	FND_DATA_PORT |= 0b11111111;
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	8b b9       	out	0x0b, r24	; 11
 1c8:	08 95       	ret

000001ca <main>:

extern int Timer_main(void);

int main(void)
{
    Timer_main();
 1ca:	0e 94 8b 01 	call	0x316	; 0x316 <Timer_main>
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <main+0x4>

000001d0 <__vector_14>:

volatile char start_flag, lap_flag, clear_flag, time_flag;
volatile int msec;
volatile char i, sec, min;

ISR(TIMER0_COMPA_vect){
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	2f 93       	push	r18
 1dc:	3f 93       	push	r19
 1de:	4f 93       	push	r20
 1e0:	5f 93       	push	r21
 1e2:	6f 93       	push	r22
 1e4:	7f 93       	push	r23
 1e6:	8f 93       	push	r24
 1e8:	9f 93       	push	r25
 1ea:	af 93       	push	r26
 1ec:	bf 93       	push	r27
 1ee:	ef 93       	push	r30
 1f0:	ff 93       	push	r31
	
	if(start_flag)msec++;
 1f2:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <start_flag>
 1f6:	88 23       	and	r24, r24
 1f8:	49 f0       	breq	.+18     	; 0x20c <__vector_14+0x3c>
 1fa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <msec>
 1fe:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <msec+0x1>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <msec+0x1>
 208:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <msec>
	if(msec >= 1000){
 20c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <msec>
 210:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <msec+0x1>
 214:	88 3e       	cpi	r24, 0xE8	; 232
 216:	93 40       	sbci	r25, 0x03	; 3
 218:	d4 f0       	brlt	.+52     	; 0x24e <__vector_14+0x7e>
		msec = 0;
 21a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <msec+0x1>
 21e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <msec>
		sec++;
 222:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sec>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <sec>
		if(sec >= 60){
 22c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <sec>
 230:	8c 33       	cpi	r24, 0x3C	; 60
 232:	68 f0       	brcs	.+26     	; 0x24e <__vector_14+0x7e>
			sec = 0;
 234:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sec>
			min++;
 238:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <min>
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <min>
			if(min >= 60)min = 0;
 242:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <min>
 246:	8c 33       	cpi	r24, 0x3C	; 60
 248:	10 f0       	brcs	.+4      	; 0x24e <__vector_14+0x7e>
 24a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <min>
		}
		//FND_clock(sec, min);
	}
	if(!(msec%10)){
 24e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <msec>
 252:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <msec+0x1>
 256:	6a e0       	ldi	r22, 0x0A	; 10
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divmodhi4>
 25e:	89 2b       	or	r24, r25
 260:	39 f4       	brne	.+14     	; 0x270 <__vector_14+0xa0>
		if(lap_flag)time_flag = 1;
 262:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <lap_flag>
 266:	88 23       	and	r24, r24
 268:	19 f0       	breq	.+6      	; 0x270 <__vector_14+0xa0>
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <time_flag>
	}
	if(clear_flag){
 270:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <clear_flag>
 274:	88 23       	and	r24, r24
 276:	91 f0       	breq	.+36     	; 0x29c <__vector_14+0xcc>
		clear_flag = 0;
 278:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <clear_flag>
		//time_flag = 1;
		FND_update_time(msec, sec);
 27c:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <sec>
 280:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <msec>
 284:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <msec+0x1>
 288:	0e 94 8a 00 	call	0x114	; 0x114 <FND_update_time>
		msec = 0;
 28c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <msec+0x1>
 290:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <msec>
		sec = 0;
 294:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <sec>
		min = 0;
 298:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <min>
	}
	i++;
 29c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i>
	if(i>=4)i=0;
 2a6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	10 f0       	brcs	.+4      	; 0x2b2 <__vector_14+0xe2>
 2ae:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <i>
	FND_COM_PORT &= 0b11110000;
 2b2:	85 b1       	in	r24, 0x05	; 5
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	85 b9       	out	0x05, r24	; 5
	FND_COM_PORT |= FND4digit_digit[i];
 2b8:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <i>
 2bc:	95 b1       	in	r25, 0x05	; 5
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	e0 50       	subi	r30, 0x00	; 0
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	80 81       	ld	r24, Z
 2c6:	89 2b       	or	r24, r25
 2c8:	85 b9       	out	0x05, r24	; 5
	FND_DATA_PORT = FND[i];
 2ca:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <i>
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	e2 5f       	subi	r30, 0xF2	; 242
 2d2:	fe 4f       	sbci	r31, 0xFE	; 254
 2d4:	80 81       	ld	r24, Z
 2d6:	8b b9       	out	0x0b, r24	; 11
	//if(!(msec%500))PORTB ^= 1<<PORTB5;
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <Timer0_init>:
		}
	}
	return 0;
}
void Timer0_init(void){
	TCCR0A |= 1 << WGM01;            //CTC Mode
 2fa:	84 b5       	in	r24, 0x24	; 36
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS00 | 1 << CS01; //64분주
 300:	85 b5       	in	r24, 0x25	; 37
 302:	83 60       	ori	r24, 0x03	; 3
 304:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;					 // 1ms 주기
 306:	89 ef       	ldi	r24, 0xF9	; 249
 308:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;           //OC0A 비교 매치 인터럽트 활성화
 30a:	ee e6       	ldi	r30, 0x6E	; 110
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	82 60       	ori	r24, 0x02	; 2
 312:	80 83       	st	Z, r24
 314:	08 95       	ret

00000316 <Timer_main>:
}

int Timer_main(void){
	char long_key_flag=1; 
	//DDRB |= 1<<PORTB5;
	DDRB &= ~(1<<PORTB4 | 1<<PORTB5);
 316:	84 b1       	in	r24, 0x04	; 4
 318:	8f 7c       	andi	r24, 0xCF	; 207
 31a:	84 b9       	out	0x04, r24	; 4
	FND4digit_init();
 31c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <FND4digit_init>
	FND_update_value(0);
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 53 00 	call	0xa6	; 0xa6 <FND_update_value>
	Timer0_init();
 328:	0e 94 7d 01 	call	0x2fa	; 0x2fa <Timer0_init>
	sei();
 32c:	78 94       	sei
	FND_DATA_PORT = FND[i];
	//if(!(msec%500))PORTB ^= 1<<PORTB5;
}

int Timer_main(void){
	char long_key_flag=1; 
 32e:	c1 e0       	ldi	r28, 0x01	; 1
			else if(!(PINB & 0b00100000)){
				_delay_us(1);
				if(!(PINB & 0b00100000)){
					start_flag = 0;
					lap_flag = 0;
					clear_flag = 1;
 330:	d1 e0       	ldi	r29, 0x01	; 1
	FND4digit_init();
	FND_update_value(0);
	Timer0_init();
	sei();
	while(1){
		if(time_flag){
 332:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <time_flag>
 336:	88 23       	and	r24, r24
 338:	51 f0       	breq	.+20     	; 0x34e <Timer_main+0x38>
			time_flag = 0;
 33a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <time_flag>
			FND_update_time(msec, sec);
 33e:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <sec>
 342:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <msec>
 346:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <msec+0x1>
 34a:	0e 94 8a 00 	call	0x114	; 0x114 <FND_update_time>
		}
		if(long_key_flag){
 34e:	cc 23       	and	r28, r28
 350:	31 f1       	breq	.+76     	; 0x39e <Timer_main+0x88>
			if(!(PINB & 0b00010000)){
 352:	1c 99       	sbic	0x03, 4	; 3
 354:	14 c0       	rjmp	.+40     	; 0x37e <Timer_main+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <Timer_main+0x42>
 35c:	00 00       	nop
				_delay_us(1);
				if(!(PINB & 0b00010000)){
 35e:	1c 99       	sbic	0x03, 4	; 3
 360:	e8 cf       	rjmp	.-48     	; 0x332 <Timer_main+0x1c>
					start_flag = 1;
 362:	d0 93 1a 01 	sts	0x011A, r29	; 0x80011a <start_flag>
					if(lap_flag)lap_flag = 0;
 366:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <lap_flag>
 36a:	88 23       	and	r24, r24
 36c:	21 f0       	breq	.+8      	; 0x376 <Timer_main+0x60>
 36e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <lap_flag>
					else lap_flag = 1;
					long_key_flag = 0;
 372:	c0 e0       	ldi	r28, 0x00	; 0
 374:	de cf       	rjmp	.-68     	; 0x332 <Timer_main+0x1c>
			if(!(PINB & 0b00010000)){
				_delay_us(1);
				if(!(PINB & 0b00010000)){
					start_flag = 1;
					if(lap_flag)lap_flag = 0;
					else lap_flag = 1;
 376:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <lap_flag>
					long_key_flag = 0;
 37a:	c0 e0       	ldi	r28, 0x00	; 0
 37c:	da cf       	rjmp	.-76     	; 0x332 <Timer_main+0x1c>
				}
			}
			else if(!(PINB & 0b00100000)){
 37e:	1d 99       	sbic	0x03, 5	; 3
 380:	d8 cf       	rjmp	.-80     	; 0x332 <Timer_main+0x1c>
 382:	85 e0       	ldi	r24, 0x05	; 5
 384:	8a 95       	dec	r24
 386:	f1 f7       	brne	.-4      	; 0x384 <Timer_main+0x6e>
 388:	00 00       	nop
				_delay_us(1);
				if(!(PINB & 0b00100000)){
 38a:	1d 99       	sbic	0x03, 5	; 3
 38c:	d2 cf       	rjmp	.-92     	; 0x332 <Timer_main+0x1c>
					start_flag = 0;
 38e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <start_flag>
					lap_flag = 0;
 392:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <lap_flag>
					clear_flag = 1;
 396:	d0 93 18 01 	sts	0x0118, r29	; 0x800118 <clear_flag>
					long_key_flag = 0;
 39a:	c0 e0       	ldi	r28, 0x00	; 0
 39c:	ca cf       	rjmp	.-108    	; 0x332 <Timer_main+0x1c>
				}
			}
		}
		else {
			if((PINB & 0b00010000) && (PINB & 0b00100000)){
 39e:	1c 9b       	sbis	0x03, 4	; 3
 3a0:	c8 cf       	rjmp	.-112    	; 0x332 <Timer_main+0x1c>
 3a2:	c3 b1       	in	r28, 0x03	; 3
 3a4:	c5 fb       	bst	r28, 5
 3a6:	cc 27       	eor	r28, r28
 3a8:	c0 f9       	bld	r28, 0
 3aa:	c3 cf       	rjmp	.-122    	; 0x332 <Timer_main+0x1c>

000003ac <__divmodhi4>:
 3ac:	97 fb       	bst	r25, 7
 3ae:	07 2e       	mov	r0, r23
 3b0:	16 f4       	brtc	.+4      	; 0x3b6 <__divmodhi4+0xa>
 3b2:	00 94       	com	r0
 3b4:	07 d0       	rcall	.+14     	; 0x3c4 <__divmodhi4_neg1>
 3b6:	77 fd       	sbrc	r23, 7
 3b8:	09 d0       	rcall	.+18     	; 0x3cc <__divmodhi4_neg2>
 3ba:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__udivmodhi4>
 3be:	07 fc       	sbrc	r0, 7
 3c0:	05 d0       	rcall	.+10     	; 0x3cc <__divmodhi4_neg2>
 3c2:	3e f4       	brtc	.+14     	; 0x3d2 <__divmodhi4_exit>

000003c4 <__divmodhi4_neg1>:
 3c4:	90 95       	com	r25
 3c6:	81 95       	neg	r24
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__divmodhi4_neg2>:
 3cc:	70 95       	com	r23
 3ce:	61 95       	neg	r22
 3d0:	7f 4f       	sbci	r23, 0xFF	; 255

000003d2 <__divmodhi4_exit>:
 3d2:	08 95       	ret

000003d4 <__udivmodhi4>:
 3d4:	aa 1b       	sub	r26, r26
 3d6:	bb 1b       	sub	r27, r27
 3d8:	51 e1       	ldi	r21, 0x11	; 17
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <__udivmodhi4_ep>

000003dc <__udivmodhi4_loop>:
 3dc:	aa 1f       	adc	r26, r26
 3de:	bb 1f       	adc	r27, r27
 3e0:	a6 17       	cp	r26, r22
 3e2:	b7 07       	cpc	r27, r23
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <__udivmodhi4_ep>
 3e6:	a6 1b       	sub	r26, r22
 3e8:	b7 0b       	sbc	r27, r23

000003ea <__udivmodhi4_ep>:
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	5a 95       	dec	r21
 3f0:	a9 f7       	brne	.-22     	; 0x3dc <__udivmodhi4_loop>
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	bc 01       	movw	r22, r24
 3f8:	cd 01       	movw	r24, r26
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
